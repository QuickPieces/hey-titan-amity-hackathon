import { getActiveClient } from '~/client/api';

import {
  onChannelCreated,
  onChannelUpdated,
  onChannelDeleted,
  onChannelJoined,
  onChannelLeft,
  onChannelMuted,
  onChannelMemberAdded,
  onChannelMemberRemoved,
} from '../events';

/**
 * ```js
 * import { observeChannels } from '@amityco/ts-sdk'
 *
 * let channels = []
 * const unsub = observeChannels(channel => merge(channels, channel))
 * ```
 *
 * Observe all mutations on a list of {@link Amity.Channel} for a current user
 *
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the channels
 *
 * @category Channel Observer
 */
export const observeChannels = (
  callback: Amity.ObjectListener<Amity.Channel, [Exclude<Amity.ChannelActionType, 'onFetch'>]>,
): Amity.Unsubscriber => {
  const { log } = getActiveClient();

  const timestamp = Date.now();
  log(`observeChannels(tmpid: ${timestamp}) > listen`);

  const disposers: Amity.Unsubscriber[] = [];

  const router = (channel: Amity.Channel, action: Exclude<Amity.ChannelActionType, 'onFetch'>) => {
    if (callback instanceof Function) return callback(channel);

    callback.onEvent?.(action, channel);
    callback[action]?.(channel);
  };

  disposers.push(
    onChannelCreated(data => router(data, 'onCreate')),
    onChannelUpdated(data => router(data, 'onUpdate')),
    onChannelDeleted(data => router(data, 'onDelete')),
    onChannelJoined(data => router(data, 'onJoin')),
    onChannelLeft(data => router(data, 'onLeft')),
    onChannelMuted(data => router(data, 'onMute')),
    onChannelMemberAdded(data => router(data, 'onMemberAdded')),
    onChannelMemberRemoved(data => router(data, 'onMemberRemoved')),
  );

  return () => {
    log(`observeChannels(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
