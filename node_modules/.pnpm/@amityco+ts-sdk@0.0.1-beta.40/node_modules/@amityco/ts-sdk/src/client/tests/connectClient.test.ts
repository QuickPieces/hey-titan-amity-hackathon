import { connectClient } from '~/utils/tests';
import {
  getNetworkTopic,
  getSmartFeedChannelTopic,
  getSmartFeedSubChannelTopic,
  getSmartFeedMessageTopic,
  getUserTopic,
  subscribeTopic,
} from '~/core/subscription';

jest.mock('~/core/subscription', () => ({
  __esModule: true,
  ...jest.requireActual('~/core/subscription'),
  subscribeTopic: jest.fn(),
  getNetworkTopic: jest.fn(),
  getUserTopic: jest.fn(),
  getSmartFeedChannelTopic: jest.fn(),
  getSmartFeedSubChannelTopic: jest.fn(),
  getSmartFeedMessageTopic: jest.fn(),
}));

describe('connectClient', () => {
  test('should subscribe to network and smart feed topic', async () => {
    (getNetworkTopic as jest.Mock).mockReturnValue('network-topic');
    (getUserTopic as jest.Mock).mockReturnValue('user-topic');
    (getSmartFeedChannelTopic as jest.Mock).mockReturnValue('smart-feed-channel-topic');
    (getSmartFeedSubChannelTopic as jest.Mock).mockReturnValue('smart-feed-sub-channel-topic');
    (getSmartFeedMessageTopic as jest.Mock).mockReturnValue('smart-feed-message-topic');

    await connectClient();

    expect(subscribeTopic).toBeCalledTimes(5);

    expect(subscribeTopic).toHaveBeenNthCalledWith(1, 'network-topic');
    expect(subscribeTopic).toHaveBeenNthCalledWith(2, 'smart-feed-channel-topic');
    expect(subscribeTopic).toHaveBeenNthCalledWith(3, 'smart-feed-sub-channel-topic');
    expect(subscribeTopic).toHaveBeenNthCalledWith(4, 'smart-feed-message-topic');
    expect(subscribeTopic).toHaveBeenNthCalledWith(5, 'user-topic');
  });
});
