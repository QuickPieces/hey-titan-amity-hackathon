import { getActiveClient } from '~/client/api';
import { getActiveUser } from '~/client/api/activeUser';
import { ingestInCache } from '~/cache/api/ingestInCache';
import { createEventSubscriber } from '~/core/events';
import { pullFromCache } from '~/cache/api';
import { getResolver } from '~/core/model';

import { prepareCommunityPayload } from '../utils';

export const createCommunityEventSubscriber = (
  event: keyof Amity.MqttCommunityEvents,
  callback: Amity.Listener<Amity.Community>,
) => {
  const client = getActiveClient();

  const filter = (payload: Amity.CommunityPayload) => {
    const unpackedPayload = prepareCommunityPayload(payload);

    if (!client.cache) {
      // TODO: here we are missing specific properties here!
      callback(unpackedPayload.communities[0]);
    } else {
      ingestInCache(unpackedPayload);

      const community = pullFromCache<Amity.Community>([
        'community',
        'get',
        unpackedPayload.communities[0].communityId,
      ])!;

      callback(community.data);
    }
  };

  return createEventSubscriber(client, event, event, filter);
};

/*
 * verifies membership status
 */
function isMember(membership: Amity.Membership<'community'>['communityMembership']): boolean {
  return membership !== 'none';
}

/*
 * checks if currently logged in user is part of the community
 */
function isCurrentUserPartOfCommunity(
  c: Amity.Community,
  m: Amity.Membership<'community'>,
): boolean {
  const { userId } = getActiveUser();

  return c.communityId === m.communityId && m.userId === userId;
}

/*
 * For mqtt events server will not send user specific data as it's broadcasted
 * to multiple users. Althought this can be calculated, it's not scalable. Hence
 * the client SDK needs to calculate this info
 */
export function updateMembershipStatus(
  communities: Amity.Community[],
  communityUsers: Amity.Membership<'community'>[],
): Amity.Community[] {
  return communities.map(c => {
    const isJoined = communityUsers.some(
      m => isCurrentUserPartOfCommunity(c, m) && isMember(m.communityMembership),
    );

    return { ...c, isJoined };
  });
}

function hasPermission(
  member: Amity.Membership<'community'>,
  payload: {
    users: Amity.User[];
  },
  permission: string,
) {
  if (member.permissions.some(x => x === permission)) {
    return true;
  }

  return payload
    .users!.find(user => user.userId === member.userId)!
    .permissions.some(x => x === permission);
}

function getEventRelatedMember(
  event: keyof Amity.MqttCommunityUserEvents,
  payload: {
    communityUsers: Amity.Membership<'community'>[];
    users: Amity.User[];
  },
) {
  if (event === 'community.joined' || event === 'community.left') {
    return payload.communityUsers![0];
  }

  // NOTE: backend returns the one who took the action and the one on whom
  // the action was taken. We need the 2nd one
  if (event === 'community.userRemoved') {
    return payload.communityUsers!.filter(x => x.communityMembership === 'none')[0];
  }

  if (event === 'community.userBanned') {
    return payload.communityUsers!.filter(x => x.communityMembership === 'banned')[0];
  }

  // NOTE: it might be that in certain edge cases permission check won't be enough
  if (event === 'community.userUnbanned') {
    return payload.communityUsers!.filter(x => !hasPermission(x, payload, 'BAN_COMMUNITY_USER'))[0];
  }

  return payload.communityUsers!.filter(x => !hasPermission(x, payload, 'ADD_COMMUNITY_USER'))[0];
}

export const createCommunityMemberEventSubscriber = (
  event: keyof Amity.MqttCommunityUserEvents,
  callback: (community: Amity.Community, member: Amity.Membership<'community'>) => void,
) => {
  const client = getActiveClient();

  const filter = (payload: Amity.CommunityMembershipPayload) => {
    const preparedPayload = prepareCommunityPayload(payload);
    const { communities, communityUsers } = preparedPayload;

    /*
     * community.isJoined is not part of the communityMembership payload, and needs
     * to be calculated based on the communityMembership value
     */
    const communitiesWithMembership = updateMembershipStatus(communities, communityUsers);

    preparedPayload.communities = communitiesWithMembership;

    if (!client.cache) {
      // TODO: here we are missing specific properties here!
      callback(preparedPayload.communities[0], getEventRelatedMember(event, preparedPayload));
    } else {
      ingestInCache(preparedPayload);

      const community = pullFromCache<Amity.Community>([
        'community',
        'get',
        preparedPayload.communities[0].communityId,
      ])!;

      const member = pullFromCache<Amity.Membership<'community'>>([
        'communityUsers',
        'get',
        getResolver('communityUsers')(getEventRelatedMember(event, preparedPayload)),
      ])!;

      callback(community.data, member.data);
    }
  };

  return createEventSubscriber(client, event, event, filter);
};
