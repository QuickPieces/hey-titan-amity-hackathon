/**
 * ```js
 * import { observeUser } from '@amityco/ts-sdk'
 *
 * let user = {}
 * const dispose = observeUser(userId, updated => user = updated)
 * ```
 *
 * @param userId the ID of the user to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the user
 *
 * Observe all mutation on a given {@link Amity.User}
 * @category User Observer
 */
export declare const observeUser: <Events extends ["onFetch", "onUpdate", "onDelete", "onFlagged", "onUnflagged", "onFlagCleared"]>(userId: string, callback: Amity.ObjectListener<Amity.Snapshot<Amity.User>, Events>) => Amity.Unsubscriber;
//# sourceMappingURL=observeUser.d.ts.map