/* eslint-disable no-use-before-define */
import { getResolver } from '~/core/model';
import { getActiveClient } from '~/client/api';
import { pushToCache, pullFromCache } from '~/cache/api';
import { createQuery, runQuery, queryOptions, filterByPropEquality } from '~/core/query';

import {
  COLLECTION_DEFAULT_CACHING_POLICY,
  COLLECTION_DEFAULT_PAGINATION_LIMIT,
} from '~/utils/constants';

import {
  onFollowerRequested,
  onFollowRequestAccepted,
  onFollowRequestDeclined,
  onFollowRequestCanceled,
  onUserFollowed,
  onUserUnfollowed,
  onFollowerDeleted,
} from '../events';
import { queryFollowers } from '../api';

/**
 * ```js
 * import { liveFollowers } from '@amityco/ts-sdk'
 *
 * let followers = []
 * const unsub = liveFollowers({
 *   userId: Amity.User['userId'];
 * }, response => merge(followers, response.data))
 * ```
 *
 * Observe all mutations on a list of {@link Amity.FollowStatus} followers for a given userId
 *
 * @param userId the user
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the messages
 *
 * @category Followers Live Collection
 */
export const liveFollowers = (
  params: Amity.FollowerLiveCollection,
  callback: Amity.LiveCollectionCallback<Amity.FollowStatus>,
  config?: Amity.LiveCollectionConfig,
): Amity.Unsubscriber => {
  const { log, cache } = getActiveClient();

  if (!cache) {
    console.log('For using Live Collection feature you need to enable Cache!');
  }

  const timestamp = Date.now();
  log(`liveFollowers(tmpid: ${timestamp}) > listen`);

  const { limit: queryLimit, ...queryParams } = params;

  const limit = queryLimit ?? COLLECTION_DEFAULT_PAGINATION_LIMIT;
  const { policy = COLLECTION_DEFAULT_CACHING_POLICY } = config ?? {};

  const disposers: Amity.Unsubscriber[] = [];
  const cacheKey = ['follow', 'collection', { userId: params.userId, type: 'follower' }];

  const responder = (data: Amity.FollowerLiveCollectionCache) => {
    let followers: Amity.FollowStatus[] =
      data.data
        .map(key => pullFromCache<Amity.FollowStatus>(['follow', 'get', key])!)
        .filter(Boolean)
        .map(({ data }) => data) ?? [];

    if (params.status && params.status !== 'all') {
      followers = filterByPropEquality(followers, 'status', params.status);
    }

    callback({
      onNextPage: onFetch,
      data: followers,
      hasNextPage: !!data.params?.page,
      loading: data.loading,
      error: data.error,
    });
  };

  const realtimeRouter = (action: Amity.FollowActionType) => (followStatus: Amity.FollowStatus) => {
    const collection = pullFromCache<Amity.FollowerLiveCollectionCache>(cacheKey)?.data;

    if (params.userId !== followStatus.to || !collection) return;

    if (['onDeclined', 'onCanceled', 'onUnfollowed', 'onDeleted'].includes(action)) {
      collection.data = collection.data.filter(p => p !== getResolver('follow')(followStatus));
    } else if (['onRequested', 'onAccepted', 'onFollowed'].includes(action)) {
      collection.data = [...new Set([getResolver('follow')(followStatus), ...collection.data])];
    }

    pushToCache(cacheKey, collection);

    responder(collection);
  };

  const onFetch = () => {
    const collection = pullFromCache<Amity.FollowerLiveCollectionCache>(cacheKey)?.data;

    const followers = collection?.data ?? [];

    if (followers.length > 0 && !collection?.params?.page) return;

    const query = createQuery(queryFollowers, {
      ...queryParams,
      page: collection?.params?.page ?? { limit },
    });

    runQuery(
      query,
      ({ data: result, error, loading, nextPage: page }) => {
        const data = {
          loading,
          error,
          params: { page },
          data: followers,
        };

        if (result) {
          data.data = [...new Set([...followers, ...result.map(getResolver('follow'))])];
        }

        pushToCache(cacheKey, data);

        responder(data);
      },
      queryOptions(policy),
    );
  };

  disposers.push(
    onFollowerRequested(realtimeRouter('onRequested')),
    onFollowRequestAccepted(realtimeRouter('onAccepted')),
    onFollowRequestDeclined(realtimeRouter('onDeclined')),
    onFollowRequestCanceled(realtimeRouter('onCanceled')),
    onUserFollowed(realtimeRouter('onFollowed')),
    onUserUnfollowed(realtimeRouter('onUnfollowed')),
    onFollowerDeleted(realtimeRouter('onDeleted')),
  );

  onFetch();

  return () => {
    log(`liveFollowers(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
