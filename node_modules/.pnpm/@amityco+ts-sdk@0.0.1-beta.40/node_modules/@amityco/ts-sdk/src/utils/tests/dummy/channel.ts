import { convertFromRaw } from '~/channel/utils';
import { date, user11, user12, user13, user14, file11 } from '.';

export function generateRawChannel(params?: Partial<Amity.RawChannel>): Amity.RawChannel {
  const channelId = params?.channelId ?? 'channelId11';

  return {
    _id: `${channelId}-internalId`,
    lastActivity: '',
    channelId,
    createdAt: date,
    isDeleted: false,
    messageCount: 0,
    path: `${channelId}-path`,
    tags: [],
    type: 'community',
    updatedAt: date,
    ...params,
  };
}

function generateRawChannelUser(
  params?: Partial<Amity.RawMembership<'channel'>>,
): Amity.RawMembership<'channel'> {
  return {
    channelId: 'channelId11',
    createdAt: date,
    isBanned: false,
    isMuted: false,
    lastActivity: date,
    lastMentionedSegment: 0,
    membership: 'member',
    muteTimeout: '',
    permissions: [],
    readToSegment: 0,
    roles: [],
    userId: user11.userId,
    ...params,
  };
}
function convertChannelUserFromRaw(
  member: Amity.RawMembership<'channel'>,
  user: Amity.User,
): Amity.Membership<'channel'> {
  return {
    ...member,
    user,
  };
}

export const mockPage = {
  paging: {
    previous: 'eyJiZWZvcmUiOjU1LCJsYXN0IjoxMH0=',
    next: 'eyJiZWZvcmUiOjU1LCJsYXN0IjoxMH0=',
  },
};

export const channelRaw1: Amity.RawChannel = generateRawChannel({ type: 'community' });

export const channelRawLive1: Amity.RawChannel = generateRawChannel({ type: 'live' });

export const channelRawConversation1: Amity.RawChannel = generateRawChannel({
  type: 'conversation',
});

export const channelRaw2: Amity.RawChannel = generateRawChannel({
  channelId: 'channelId12',
  tags: ['tag1'],
  type: 'conversation',
});

export const channelRaw3: Amity.RawChannel = generateRawChannel({
  channelId: 'channelId21',
});

export const channel1: Amity.Channel = convertFromRaw(channelRaw1, {
  defaultSubChannelHasUnreadMention: false,
  defaultSubChannelUnreadCount: 0,
  localLastMentionSegment: 0,
  localReadToSegment: 0,
});

export const channel2: Amity.Channel = convertFromRaw(channelRaw2, {
  defaultSubChannelHasUnreadMention: false,
  defaultSubChannelUnreadCount: 0,
  localLastMentionSegment: 0,
  localReadToSegment: 0,
});

export const rawChannelUser = generateRawChannelUser();
export const channelUser = convertChannelUserFromRaw(rawChannelUser, user11);

export const rawChannelUser2 = generateRawChannelUser({
  channelId: channel2.channelId,
  lastMentionedSegment: 2,
  readToSegment: 1,
});
export const channelUser2 = convertChannelUserFromRaw(rawChannelUser2, user11);

export const rawChannelUser3 = generateRawChannelUser({
  membership: 'none',
  roles: ['test-role'],
  userId: user12.userId,
});
export const channelUser3 = convertChannelUserFromRaw(rawChannelUser3, user12);

export const channelUser4 = generateRawChannelUser({
  membership: 'none',
  roles: ['test-role'],
  userId: user13.userId,
});

export const rawBannedChannelUser = generateRawChannelUser({
  isBanned: true,
  membership: 'banned',
  userId: user13.userId,
});
export const bannedChannelUser = convertChannelUserFromRaw(rawBannedChannelUser, user13);

export const rawMutedChannelUser = generateRawChannelUser({
  isMuted: true,
  userId: 'test',
});
export const mutedChannelUser = convertChannelUserFromRaw(rawMutedChannelUser, user11);

export const rawChannelUserWithRole = generateRawChannelUser({
  roles: ['test-role'],
  userId: user14.userId,
});
export const channelUserWithRole = convertChannelUserFromRaw(rawChannelUserWithRole, user14);

export const channelQueryResponse = {
  data: {
    channels: [channelRaw1, channelRaw2],
    channelUsers: [],
    files: [],
    users: [],
    ...mockPage,
  },
};

export const getChannelsResponse = {
  data: {
    channels: [channelRaw1, channelRaw2, channelRaw3],
    channelUsers: [],
    files: [],
    users: [],
    ...mockPage,
  },
};

export const channelQueryResponsePage2 = {
  data: {
    channels: [channelRaw3],
    channelUsers: [],
    files: [],
    users: [],
    ...mockPage,
  },
};

export const channelTagQueryResponse = {
  data: {
    channels: [channelRaw2],
    channelUsers: [],
    files: [],
    users: [],
    ...mockPage,
  },
};

export const channelExcludeTagQueryResponse = {
  data: {
    channels: [channelRaw1, channelRaw3],
    channelUsers: [],
    files: [],
    users: [],
    ...mockPage,
  },
};

export const channelUserQueryResponse = {
  data: {
    channels: [channelRaw1],
    channelUsers: [rawChannelUser, rawChannelUser3],
    users: [user11, user12],
    files: [],
    ...mockPage,
  },
};

export const emptyChannelUserQueryResponse = {
  data: {
    channels: [channelRaw1],
    channelUsers: [],
    users: [],
    files: [],
    ...mockPage,
  },
};

export const channelUserModel = [channelUser, { ...rawChannelUser3, user: user12 }];

export const channelUserQueryResponsePage2 = {
  data: {
    channels: [channelRaw1],
    channelUsers: [channelUser4],
    users: [user13],
    files: [],
    ...mockPage,
  },
};

export const channelUserQueryResponsePage3 = {
  data: {
    channels: [channelRaw1],
    channelUsers: [rawChannelUserWithRole, rawMutedChannelUser, rawBannedChannelUser],
    users: [user14, user11, user13],
    files: [],
    ...mockPage,
  },
};

export const rawChannelPayload: Amity.ChannelPayload = {
  channels: [channelRaw1],
  channelUsers: [rawChannelUserWithRole, rawMutedChannelUser],
  users: [user14, user11],
  files: [file11],
};

// for testing ingest in cache
export const channelPayload: Amity.ProcessedChannelPayload = {
  channels: [channel1],
  channelUsers: [channelUserWithRole, mutedChannelUser],
  users: [user14, user11],
  files: [file11],
};

export const liveChannelPayload = {
  channels: [channelRawLive1],
  channelUsers: [rawChannelUserWithRole, rawMutedChannelUser],
  users: [user14, user11],
  files: [file11],
};

export const conversationChannelPayload = {
  channels: [channelRawConversation1],
  channelUsers: [rawChannelUserWithRole, rawMutedChannelUser],
  users: [user14, user11],
  files: [file11],
};
