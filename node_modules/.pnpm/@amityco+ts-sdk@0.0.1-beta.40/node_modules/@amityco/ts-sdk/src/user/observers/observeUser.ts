import { createQuery, runQuery } from '~/core/query/query';

import { getActiveClient } from '~/client/api';

import { getUser } from '../api';
import {
  onUserUpdated,
  onUserDeleted,
  onUserFlagged,
  onUserUnflagged,
  onUserFlagCleared,
} from '../events';

/**
 * ```js
 * import { observeUser } from '@amityco/ts-sdk'
 *
 * let user = {}
 * const dispose = observeUser(userId, updated => user = updated)
 * ```
 *
 * @param userId the ID of the user to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the user
 *
 * Observe all mutation on a given {@link Amity.User}
 * @category User Observer
 */
export const observeUser = <
  Events extends ['onFetch', 'onUpdate', 'onDelete', 'onFlagged', 'onUnflagged', 'onFlagCleared'],
>(
  userId: string,
  callback: Amity.ObjectListener<Amity.Snapshot<Amity.User>, Events>,
): Amity.Unsubscriber => {
  const { log } = getActiveClient();

  const timestamp = Date.now();
  log(`observeUser(tmpid: ${timestamp}) > listen`);

  console.log('observeUser will be deprecated on 25th November 2022, please use liveUser instead.');

  // wrapper function to make sure
  const router = (result: Amity.Snapshot<Amity.User>, action: Events[number]) => {
    // filter function
    if (result.data?.userId !== userId) return;

    if (callback instanceof Function) return callback(result);

    if (action !== 'onFetch') callback.onEvent?.(action, result);

    callback[action]?.(result);
  };

  const disposers: Amity.Unsubscriber[] = [];

  disposers.push(
    onUserUpdated(data => router({ data, loading: false, origin: 'event' }, 'onUpdate')),
    onUserDeleted(data => router({ data, loading: false, origin: 'event' }, 'onDelete')),
    onUserFlagged(data => router({ data, loading: false, origin: 'event' }, 'onFlagged')),
    onUserUnflagged(data => router({ data, loading: false, origin: 'event' }, 'onUnflagged')),
    onUserFlagCleared(data => router({ data, loading: false, origin: 'event' }, 'onFlagCleared')),
  );

  runQuery(createQuery(getUser, userId), result => result.data && router(result, 'onFetch'));

  return () => {
    log(`observeUser(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
