import { getActiveClient } from '~/client/api';

import { getResolver } from '~/core/model';
import { pullFromCache, pushToCache } from '~/cache/api';
import { ingestInCache } from '~/cache/api/ingestInCache';

import { prepareCommunityPayload } from '../utils';

/**
 * ```js
 * import { getRecommendedCommunities } from '@amityco/ts-sdk'
 * const communities = await getRecommendedCommunities()
 * ```
 *
 * Gets a list of recommended {@link Amity.Community} objects
 *
 * @param query The query parameters
 * @returns A list of {@link Amity.Community} objects
 *
 * @category Community API
 * @async
 */
export const getRecommendedCommunities = async (
  query?: Partial<Amity.PageLimit>,
): Promise<Amity.Cached<Amity.Community[]>> => {
  const client = getActiveClient();
  client.log('channel/getRecommendedCommunities', query);

  const { limit = 5 } = query ?? {};

  // API-FIX: backend doesnt answer Amity.Response
  // const { data: payload } = await client.http.get<Amity.Response<CommunityPayload>>(
  const { data: payload } = await client.http.get<Amity.CommunityPayload>(
    `/api/v3/communities/recommended`,
    { params: { options: { limit } } },
  );

  const data = prepareCommunityPayload(payload);
  const { communities } = data;

  const cachedAt = client.cache && Date.now();

  if (client.cache) {
    ingestInCache(data, { cachedAt });

    const cacheKey = ['community', 'recommended', { params: { options: { limit } } }];
    pushToCache(cacheKey, { communities: communities.map(getResolver('community')) });
  }

  return { data: communities, cachedAt };
};

/**
 * ```js
 * import { getRecommendedCommunities } from '@amityco/ts-sdk'
 * const communities = getRecommendedCommunities.locally()
 * ```
 *
 * Gets a list of recommended {@link Amity.Community} objects from cache
 *
 * @param query The query parameters
 * @returns communities
 *
 * @category Community API
 */
getRecommendedCommunities.locally = (
  query: Parameters<typeof getRecommendedCommunities>[0],
): Amity.Cached<Amity.Community[]> | undefined => {
  const client = getActiveClient();
  client.log('community/getRecommendedCommunities.locally', query);

  if (!client.cache) return;

  const { limit = 5 } = query ?? {};

  const queryKey = ['community', 'recommended', { params: { options: { limit } } }];
  const { data, cachedAt } =
    pullFromCache<{ communities: Pick<Amity.Community, 'communityId'>[] }>(queryKey) ?? {};

  if (!data?.communities.length) return;

  const communities: Amity.Community[] = data.communities
    .map(communityId => pullFromCache<Amity.Community>(['community', 'get', communityId])!)
    .filter(Boolean)
    .map(({ data }) => data);

  return communities.length === data?.communities?.length
    ? { data: communities, cachedAt }
    : undefined;
};
