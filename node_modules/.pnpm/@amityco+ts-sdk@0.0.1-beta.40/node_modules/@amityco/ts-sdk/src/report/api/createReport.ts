import { getActiveClient } from '~/client/api/activeClient';

import { ingestInCache } from '~/cache/api/ingestInCache';
import { fireEvent } from '~/core/events';
import { prepareMembershipPayload } from '~/group/utils';

import { prepareMessagePayload } from '~/message/utils';
import REFERENCE_TYPES from '../constants/referenceTypes';

/**
 * ```js
 * import { createReport } from '@amityco/ts-sdk'
 * const flagged = await createReport('post', postId)
 * ```
 *
 * @param referenceType The type of thing to add a report to, such as a post or a comment.
 * @param referenceId The ID of the thing to add a new report to.
 * @returns the created report result
 *
 * @category Report API
 * @async
 * */
export const createReport = async (
  referenceType: keyof typeof REFERENCE_TYPES,
  referenceId: string,
): Promise<boolean> => {
  const client = getActiveClient();
  client.log('report/createReport', { referenceType, referenceId });

  const getAPIUrl = (): string => {
    if (referenceType === 'user') {
      return `/api/v4/me/flags/${encodeURIComponent(referenceId)}`;
    }

    if (referenceType === 'message') {
      return `/api/v5/messages/${encodeURIComponent(referenceId)}/flags`;
    }

    const { domainName } = REFERENCE_TYPES[referenceType];

    return `/api/v3/${domainName}/${encodeURIComponent(referenceId)}/flag`;
  };

  const { data: payload } = await client.http.post<
    Amity.PostPayload | Amity.CommentPayload | Amity.MessagePayload | Amity.UserPayload
  >(getAPIUrl());

  if (client.cache) {
    if (referenceType === 'message') {
      ingestInCache(prepareMessagePayload(payload as Amity.MessagePayload));
    } else if (referenceType === 'post') {
      ingestInCache(prepareMembershipPayload(payload as Amity.PostPayload, 'communityUsers'));
    } else {
      ingestInCache(payload as Amity.CommentPayload | Amity.UserPayload);
    }
  }

  fireEvent(`${referenceType}.flagged`, payload);

  return !!payload;
};
