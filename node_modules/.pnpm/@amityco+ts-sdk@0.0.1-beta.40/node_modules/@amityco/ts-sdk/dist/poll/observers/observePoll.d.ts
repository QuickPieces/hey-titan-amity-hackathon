/**
 * ```js
 * import { observePoll } from '@amityco/ts-sdk'
 *
 * let poll = {}
 * const dispose = observePoll(pollId, updated => poll = updated)
 * ```
 *
 * Observe all mutation on a given {@link Amity.Poll}
 *
 * @param pollId the ID of the poll to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the poll
 *
 * @category Poll Observer
 */
export declare const observePoll: <Events extends ["onFetch", "onUpdate", "onDelete"]>(pollId: string, callback: Amity.ObjectListener<Amity.Snapshot<Amity.Poll | undefined>, Events>, policy?: Amity.QueryPolicy) => Amity.Unsubscriber;
//# sourceMappingURL=observePoll.d.ts.map