/**
 * ```js
 * import { observeCommunity } from '@amityco/ts-sdk'
 *
 * let community = {}
 * const dispose = observeCommunity(communityId, updated => community = updated)
 * ```
 *
 * Observe all mutation on a given {@link Amity.Community}
 *
 * @param communityId the ID of the community to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the community
 *
 * @category Community Observer
 */
export declare const observeCommunity: <Events extends ["onFetch", "onUpdate", "onDelete", "onJoin", "onLeft", "onUserAdded", "onUserRemoved", "onUserBanned", "onUserUnbanned"]>(communityId: string, callback: Amity.ObjectListener<Amity.Snapshot<Amity.Community | undefined>, Events>) => Amity.Unsubscriber;
//# sourceMappingURL=observeCommunity.d.ts.map