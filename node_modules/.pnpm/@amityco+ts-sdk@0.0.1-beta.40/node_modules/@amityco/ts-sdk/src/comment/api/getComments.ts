import { getActiveClient } from '~/client/api';

import { pullFromCache } from '~/cache/api';
import { ingestInCache } from '~/cache/api/ingestInCache';

/**
 * ```js
 * import { getComments } from '@amityco/ts-sdk'
 * const comments = await getComments(['foo', 'bar'])
 * ```
 *
 * Fetches a collection of {@link Amity.Comment} objects
 *
 * @param commentIds the IDs of the {@link Amity.Comment} to fetch
 * @returns the associated collection of {@link Amity.Comment} objects
 *
 * @category Comment API
 * @async
 */
export const getComments = async (
  commentIds: Amity.Comment['commentId'][],
): Promise<Amity.Cached<Amity.Comment[]>> => {
  const client = getActiveClient();
  client.log('comment/getComments', commentIds);

  const encodedCommentIds = commentIds.map(commentId => encodeURIComponent(commentId));

  // API-FIX: endpoint should not be /list, parameters should be querystring.
  const { data } = await client.http.get<Amity.CommentPayload>(`/api/v3/comments/list`, {
    params: { commentIds: encodedCommentIds },
  });

  const cachedAt = client.cache && Date.now();
  if (client.cache) ingestInCache(data, { cachedAt });

  return {
    data: data.comments,
    cachedAt,
  };
};

/**
 * ```js
 * import { getComments } from '@amityco/ts-sdk'
 * const comments = getComments.locally(['foo', 'bar'])
 * ```
 *
 * Fetches a collection of {@link Amity.Comment} objects from cache
 *
 * @param commentIds the IDs of the {@link Amity.Comment} to fetch
 * @returns the associated collection of {@link Amity.Comment} objects
 *
 * @category Comment API
 */
getComments.locally = (
  commentIds: Amity.Comment['commentId'][],
): Amity.Cached<Amity.Comment[]> | undefined => {
  const client = getActiveClient();
  client.log('comment/getComments.locally', commentIds);

  if (!client.cache) return;

  const cached = commentIds
    .map(commentId => pullFromCache<Amity.Comment>(['comment', 'get', commentId])!)
    .filter(Boolean);

  const comments = cached.map(({ data }) => data);
  const oldest = cached.sort((a, b) => (a.cachedAt! < b.cachedAt! ? -1 : 1))?.[0];

  if (cached?.length < commentIds.length) return;

  return {
    data: comments,
    cachedAt: oldest.cachedAt,
  };
};
