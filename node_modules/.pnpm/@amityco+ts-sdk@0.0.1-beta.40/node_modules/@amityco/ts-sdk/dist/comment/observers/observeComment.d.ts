/**
 * ```js
 * import { observeComment } from '@amityco/ts-sdk'
 *
 * let comment = {}
 * const dispose = observeComment(commentId, ({ data }) => comment = data)
 * ```
 *
 * Observe all mutation on a given {@link Amity.Comment}
 *
 * @param commentId the ID of the comment to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the comment
 *
 * @category Comment Observer
 */
export declare const observeComment: <Events extends ["onFetch", "onUpdate", "onDelete", "onFlagged", "onUnflagged", "onReactionAdded", "onReactionRemoved"]>(commentId: string, callback: Amity.ObjectListener<Amity.Snapshot<Amity.Comment<any> | undefined>, Events>, policy?: Amity.QueryPolicy) => Amity.Unsubscriber;
//# sourceMappingURL=observeComment.d.ts.map