import { getActiveClient } from '~/client/api';

import {
  onPostCreated,
  onPostUpdated,
  onPostDeleted,
  onPostApproved,
  onPostDeclined,
  onPostFlagged,
  onPostUnflagged,
  onPostReactionAdded,
  onPostReactionRemoved,
} from '../events';

/**
 * ```js
 * import { observePosts } from '@amityco/ts-sdk'
 *
 * let posts = []
 * const unsub = observePosts({
 *   targetType: Amity.PostTargetType,
 *   targetId: Amity.Post['targetId'],
 * }, post => merge(posts, post))
 * ```
 *
 * Observe all mutations on a list of {@link Amity.Post} for a given target object
 *
 * @param targetType the type of the target
 * @param targetId the ID of the target
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the messages
 *
 * @category Post Observer
 */
export const observePosts = (
  params: {
    targetType: Amity.PostTargetType;
    targetId: Amity.Post['targetId'];
  },
  callback: Amity.ObjectListener<
    Amity.Post,
    [
      'onCreate',
      'onUpdate',
      'onDelete',
      'onApproved',
      'onDeclined',
      'onFlagged',
      'onUnflagged',
      'onReactionAdded',
      'onReactionRemoved',
    ]
  >,
): Amity.Unsubscriber => {
  const { log } = getActiveClient();

  const timestamp = Date.now();
  log(`observePosts(tmpid: ${timestamp}) > listen`);

  const disposers: Amity.Unsubscriber[] = [];

  const router = (post: Amity.Post, action: Exclude<Amity.PostActionType, 'onFetch'>) => {
    if (params.targetId !== post.targetId || params.targetType !== post.targetType) return;

    if (callback instanceof Function) return callback(post);

    callback.onEvent?.(action, post);
    callback[action]?.(post);
  };

  disposers.push(
    onPostCreated(post => router(post, 'onCreate')),
    onPostUpdated(post => router(post, 'onUpdate')),
    onPostDeleted(post => router(post, 'onDelete')),
    onPostApproved(post => router(post, 'onApproved')),
    onPostDeclined(post => router(post, 'onDeclined')),
    onPostFlagged(post => router(post, 'onFlagged')),
    onPostUnflagged(post => router(post, 'onUnflagged')),
    onPostReactionAdded(post => router(post, 'onReactionAdded')),
    onPostReactionRemoved(post => router(post, 'onReactionRemoved')),
  );

  return () => {
    log(`observePosts(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
