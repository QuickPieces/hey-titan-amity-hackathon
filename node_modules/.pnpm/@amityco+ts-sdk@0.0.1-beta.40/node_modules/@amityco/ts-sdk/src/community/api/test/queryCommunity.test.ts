import { disableCache, enableCache, pullFromCache, pushToCache } from '~/cache/api';

import { client, community11, community21, communityUser11 } from '~/utils/tests';

import { queryCommunities } from '../queryCommunities';

const communities = [community11, community21];

const pagingToken = {
  previous: 'eyJiZWZvcmUiOjU1LCJsYXN0IjoxMH0=',
  next: 'eyJiZWZvcmUiOjU1LCJsYXN0IjoxMH0=',
};

const communitiesToQuery = [community11];
const communityIdsToQuery = communitiesToQuery.map(community => community.communityId);
const communityUsersToQuery = [communityUser11];
const queryCriteriaWithoutPage = { displayName: communities[0].displayName };
const pagingCriteria = { limit: 10 };
const queryCriteria = { ...queryCriteriaWithoutPage, page: pagingCriteria };

const resolvedGetValue = {
  data: {
    communities: communitiesToQuery,
    communityUsers: communityUsersToQuery,
    files: [],
    users: [],
    categories: [],
    feeds: [],
    paging: pagingToken,
  },
};

describe('queryCommunities', () => {
  test('should return fetched communities with correct paging', async () => {
    client.http.get = jest.fn().mockResolvedValueOnce(resolvedGetValue);

    await expect(queryCommunities(queryCriteria)).resolves.toEqual(
      expect.objectContaining({
        data: communitiesToQuery,
        prevPage: { before: 55, limit: 10 },
        nextPage: { before: 55, limit: 10 },
      }),
    );
  });

  test('should update cache after fetching communities', async () => {
    enableCache();
    client.http.get = jest.fn().mockResolvedValue(resolvedGetValue);

    await queryCommunities(queryCriteria);

    const recieved = pullFromCache([
      'community',
      'query',
      { ...queryCriteriaWithoutPage, options: pagingCriteria },
    ])?.data;

    expect(recieved).toEqual({
      communities: communityIdsToQuery,
      paging: pagingToken,
    });

    disableCache();
  });

  test('should throw an error if request fails', async () => {
    client.http.get = jest.fn().mockRejectedValueOnce(new Error('error'));

    await expect(queryCommunities(queryCriteria)).rejects.toThrow('error');
  });
});

describe.skip('queryCommunities.locally', () => {
  beforeEach(() => enableCache());
  afterEach(() => disableCache());

  test('should return cached communities', () => {
    communities.forEach(community =>
      pushToCache(['community', 'get', community.communityId], community),
    );

    pushToCache(['community', 'query', { ...queryCriteriaWithoutPage, options: pagingCriteria }], {
      communities: communitiesToQuery,
      paging: pagingToken,
    });

    expect(queryCommunities.locally(queryCriteria)).toEqual(
      expect.objectContaining({
        data: communitiesToQuery,
        prevPage: { before: 55, limit: 10 },
        nextPage: { before: 55, limit: 10 },
      }),
    );
  });

  test(`shouldn't return if individual communities cache not exist`, () => {
    pushToCache(['community', 'query', { ...queryCriteriaWithoutPage, options: pagingCriteria }], {
      communities: communitiesToQuery,
      paging: pagingToken,
    });

    expect(queryCommunities.locally(queryCriteria)).toBeUndefined();
  });

  test('it should return undefined if communities not in cache', () => {
    expect(queryCommunities.locally({ displayName: 'non-existent' })).toBeUndefined();
  });
});
