import { AxiosResponse } from 'axios';
export declare function convertFromRaw({ channelPublicId, childCount, creatorPublicId, mentionedUsers, messageFeedId, myReactions, reactionCount, reactions, referenceId, segment, ...rest }: Amity.RawMessage): Amity.Message;
export declare const prepareMessagePayload: (payload: Amity.MessagePayload) => Amity.ProcessedMessagePayload;
export declare const convertResponseFromRaw: <T extends Amity.MessagePayload<any>>(response: AxiosResponse<T, any>) => AxiosResponse<Omit<T, "messages"> & {
    messages: Amity.ProcessedMessagePayload['messages'];
}, any>;
declare type RawQueryMessages = Omit<Amity.QueryMessages, 'page' | 'sortBy' | 'subChannelId' | 'tags'> & {
    includeTags?: Amity.QueryMessages['tags'];
    messageFeedId: Amity.QueryMessages['subChannelId'];
    options: {
        sortBy?: Amity.QueryMessages['sortBy'];
        token: string;
    };
};
export declare function convertParams({ subChannelId, mentionees, ...rest }: Partial<Amity.Message>): Record<string, any>;
export declare function convertQueryParams({ page, sortBy, subChannelId, tags, ...rest }: Amity.QueryMessages): RawQueryMessages;
export {};
//# sourceMappingURL=index.d.ts.map