/* eslint-disable no-use-before-define */
import { getResolver } from '~/core/model';
import { getActiveClient } from '~/client/api';
import { pushToCache, pullFromCache } from '~/cache/api';
import { createQuery, runQuery, queryOptions, filterByPropEquality } from '~/core/query';

import {
  COLLECTION_DEFAULT_CACHING_POLICY,
  COLLECTION_DEFAULT_PAGINATION_LIMIT,
  ENABLE_CACHE_MESSAGE,
} from '~/utils/constants';

import {
  onMessageCreated,
  onMessageDeleted,
  onMessageUpdated,
  onMessageFlagged,
  onMessageUnflagged,
  onMessageFlagCleared,
  onMessageReactionAdded,
  onMessageReactionRemoved,
} from '../events';
import { onMessageFetched } from '../events/onMessageFetched';
import { queryMessages } from '../api';

/**
 * ```js
 * import { liveMessages } from '@amityco/ts-sdk';
 *
 * let messages = [];
 *
 * const unsubscribe = liveMessages({
 *   subChannelId: Amity.SubChannel['subChannelId'];
 * }, response => merge(messages, response.data));
 * ```
 *
 * Observe all mutations on a list of {@link Amity.Message} for a given target object
 *
 * @param params for querying messages from a sub channel
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the messages
 *
 * @category Messages Live Collection
 */
export const liveMessages = (
  params: Amity.MessagesLiveCollection,
  callback: Amity.LiveCollectionCallback<Amity.Message>,
  config?: Amity.LiveCollectionConfig,
): Amity.Unsubscriber => {
  const { log, cache } = getActiveClient();

  if (!cache) {
    console.log(ENABLE_CACHE_MESSAGE);
  }

  const timestamp = Date.now();
  log(`liveMessages(tmpid: ${timestamp}) > listen`);

  const { limit: queryLimit, ...queryParams } = params;

  const limit = queryLimit ?? COLLECTION_DEFAULT_PAGINATION_LIMIT;
  const { policy = COLLECTION_DEFAULT_CACHING_POLICY } = config ?? {};

  const disposers: Amity.Unsubscriber[] = [];
  const cacheKey = ['message', 'collection', { subChannelId: params.subChannelId }];

  const responder = (data: Amity.MessageLiveCollectionCache) => {
    let messages: Amity.Message[] =
      data.data
        .map(messageId => pullFromCache<Amity.Message>(['message', 'get', messageId])!)
        .filter(Boolean)
        .map(({ data }) => data) ?? [];

    /*
     * for cases when message is deleted via RTE, this flag is used to get
     * items fro cache that are deleted | !deleted
     */
    messages = filterByPropEquality(messages, 'isDeleted', params.isDeleted);

    callback({
      onNextPage: onFetch,
      data: messages,
      hasNextPage: !!data.params?.page,
      loading: data.loading,
      error: data.error,
    });
  };

  const realtimeRouter = (action: Amity.MessageActionType) => (message: Amity.Message) => {
    const collection = pullFromCache<Amity.MessageLiveCollectionCache>(cacheKey)?.data;

    if (params.subChannelId !== message.subChannelId || !collection) return;

    if (action === 'onCreate') {
      collection.data = [...new Set([message.messageId, ...collection.data])];
    } else if (['onDelete'].includes(action)) {
      collection.data = collection.data.filter(m => m !== message.messageId);
    }

    pushToCache(cacheKey, collection);

    responder(collection);
  };

  const onFetch = () => {
    const collection = pullFromCache<Amity.MessageLiveCollectionCache>(cacheKey)?.data;

    const messages = collection?.data ?? [];

    if (messages.length > 0 && !collection?.params?.page) return;

    const query = createQuery(queryMessages, {
      ...queryParams,
      page: collection?.params?.page ?? { limit },
    });

    runQuery(
      query,
      ({ data: result, error, loading, prevPage: page }) => {
        const data = {
          loading,
          error,
          params: { page },
          data: messages,
        };

        if (result) {
          data.data = [...new Set([...messages, ...result.map(getResolver('message'))])];
        }

        pushToCache(cacheKey, data);

        responder(data);
      },
      queryOptions(policy),
    );
  };

  disposers.push(
    onMessageFetched(realtimeRouter('onFetch')),
    onMessageCreated(realtimeRouter('onCreate')),
    onMessageUpdated(realtimeRouter('onUpdate')),
    onMessageDeleted(realtimeRouter('onDelete')),
    onMessageFlagged(realtimeRouter('onFlagged')),
    onMessageUnflagged(realtimeRouter('onUnflagged')),
    onMessageFlagCleared(realtimeRouter('onFlagCleared')),
    onMessageReactionAdded(realtimeRouter('onReactionAdded')),
    onMessageReactionRemoved(realtimeRouter('onReactionRemoved')),
  );

  onFetch();

  return () => {
    log(`liveMessages(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
