export declare const MessageContentType: Readonly<{
    TEXT: "text";
    IMAGE: "image";
    FILE: "file";
    VIDEO: "video";
    AUDIO: "audio";
    CUSTOM: "custom";
}>;
declare global {
    namespace Amity {
        type MessageContentType = ValueOf<typeof MessageContentType>;
        type MessageActionType = 'onCreate' | 'onUpdate' | 'onDelete' | 'onFetch' | 'onFlagged' | 'onUnflagged' | 'onFlagCleared' | 'onReactionAdded' | 'onReactionRemoved';
        type RawMessage<T extends Amity.MessageContentType = any> = {
            channelId: string;
            channelPublicId: string;
            channelType: Amity.Channel['type'];
            childCount: number;
            creatorId: string;
            creatorPublicId: string;
            editedAt?: Amity.timestamp;
            mentionedUsers?: Array<Amity.ChannelMention | (Amity.UserMention & {
                userPublicIds: string[];
            })>;
            messageFeedId: Amity.RawSubChannel['messageFeedId'];
            messageId: string;
            myReactions?: string[];
            parentId?: string;
            reactionCount: number;
            reactions?: Record<string, number>;
            referenceId?: string;
            segment: number;
        } & Amity.Content<T> & Amity.Flaggable & Amity.Metadata & Amity.SoftDelete & Amity.Subscribable & Amity.Taggable & Amity.Timestamps;
        type Message<T extends Amity.MessageContentType = any> = {
            channelId: Amity.Channel['channelId'];
            channelSegment: number;
            childrenNumber: number;
            creatorId: string;
            editedAt?: Amity.timestamp;
            parentId?: string;
            messageId: string;
            subChannelId: Amity.SubChannel['subChannelId'];
            uniqueId: string;
        } & Amity.Content<T> & Amity.Mentionable<'user' | 'channel'> & Amity.Metadata & Amity.Reactable & Amity.SoftDelete & Amity.Subscribable & Amity.Timestamps & Amity.Taggable;
        type QueryMessages = {
            subChannelId: Amity.SubChannel['subChannelId'];
            dataType?: Amity.MessageContentType;
            excludeTags?: Amity.Taggable['tags'];
            hasFlags?: boolean;
            isDeleted?: boolean;
            page?: Amity.Page<string>;
            parentId?: Amity.Message['parentId'];
            sortBy?: 'segmentAsc' | 'segmentDesc';
            tags?: Amity.Taggable['tags'];
        };
        type MessagesLiveCollection = Amity.LiveCollectionParams<Omit<QueryMessages, 'page'>>;
        type MessageLiveCollectionCache = Amity.LiveCollectionCache<Amity.Message['subChannelId'], Pick<QueryMessages, 'page'>>;
    }
}
//# sourceMappingURL=message.d.ts.map