/* eslint-disable no-use-before-define */
import { getResolver } from '~/core/model';
import { pullFromCache, pushToCache } from '~/cache/api';
import { getActiveClient } from '~/client/api';
import {
  createQuery,
  queryOptions,
  runQuery,
  sortByFirstCreated,
  sortByLastCreated,
} from '~/core/query';
import {
  COLLECTION_DEFAULT_CACHING_POLICY,
  COLLECTION_DEFAULT_PAGINATION_LIMIT,
  ENABLE_CACHE_MESSAGE,
} from '~/utils/constants';
import {
  onCommunityLeft,
  onCommunityJoined,
  onCommunityUserBanned,
  onCommunityUserChanged,
  onCommunityUserUnbanned,
  onCommunityUserRoleAdded,
  onCommunityUserRoleRemoved,
} from '../events';
import { queryCommunityMembers } from '../api';

/**
 * ```js
 * import { liveCommunityMembers } from '@amityco/ts-sdk'
 *
 * let communityMembers = []
 * const unsub = liveCommunityMembers({
 *   communityId: Amity.Community['communityId'],
 * }, response => merge(communityMembers, response.data))
 * ```
 *
 * Observe all mutations on a list of {@link Amity.CommunityUser}s
 *
 * @param params for querying community users
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the community users
 *
 * @category Community Live Collection
 */
export const liveCommunityMembers = (
  params: Amity.CommunityMemberLiveCollection,
  callback: Amity.LiveCollectionCallback<Amity.Membership<'community'>>,
  config?: Amity.LiveCollectionConfig,
) => {
  const { log, cache } = getActiveClient();

  if (!cache) {
    console.log(ENABLE_CACHE_MESSAGE);
  }

  const timestamp = Date.now();
  log(`liveCommunityMembers(tmpid: ${timestamp}) > listen`);

  const { limit: queryLimit, ...queryParams } = params;

  const limit = queryLimit ?? COLLECTION_DEFAULT_PAGINATION_LIMIT;
  const { policy = COLLECTION_DEFAULT_CACHING_POLICY } = config ?? {};

  const disposers: Amity.Unsubscriber[] = [];
  const cacheKey = ['communityUsers', 'collection', { communityId: params.communityId }];

  const responder = (data: Amity.CommunityMemberLiveCollectionCache) => {
    let communityMembers: Amity.Membership<'community'>[] =
      data.data
        .map(id => pullFromCache<Amity.Membership<'community'>>(['communityUsers', 'get', id])!)
        .filter(Boolean)
        .map(({ data }) => data) ?? [];

    if (params.roles)
      communityMembers = communityMembers.filter(c =>
        c.roles?.some(t => params.roles?.includes(t)),
      );

    if (params.membership) {
      communityMembers = communityMembers.filter(({ communityMembership }) =>
        // @ts-ignore
        params.membership.includes(communityMembership),
      );
    }

    if (params.search) {
      /*
       * Search by userId | displayName
       */
      const containsMatcher = new RegExp(params.search);

      communityMembers = communityMembers.filter(m => {
        if (m.userId.match(containsMatcher)) return true;

        return m.user && m.user.displayName?.match(containsMatcher);
      });
    }

    const sortBy = params.sortBy ? params.sortBy : 'lastCreated';
    communityMembers = communityMembers.sort(
      sortBy === 'lastCreated' ? sortByLastCreated : sortByFirstCreated,
    );

    callback({
      onNextPage: onFetch,
      data: communityMembers,
      hasNextPage: !!data.params?.page,
      loading: data.loading,
      error: data.error,
    });
  };

  const realtimeRouter =
    (_: Amity.CommunityMemberActionType) =>
    (_: Amity.Community, communityMember: Amity.Membership<'community'>) => {
      if (params.communityId !== communityMember.communityId) {
        return;
      }

      const collection = pullFromCache<Amity.CommunityMemberLiveCollectionCache>(cacheKey)?.data;
      if (!collection) return;

      const communityMemberCacheId = getResolver('communityUsers')({
        communityId: params.communityId,
        userId: communityMember.userId,
      });

      collection.data = [...new Set([communityMemberCacheId, ...collection.data])];

      pushToCache(cacheKey, collection);
      responder(collection);
    };

  const onFetch = () => {
    const collection = pullFromCache<Amity.CommunityMemberLiveCollectionCache>(cacheKey)?.data;

    const communityMembers = collection?.data ?? [];

    if (communityMembers.length > 0 && !collection?.params.page) return;

    const query = createQuery(queryCommunityMembers, {
      ...queryParams,
      page: collection?.params.page ?? { limit },
    });

    runQuery(
      query,
      ({ data: result, error, loading, nextPage: page }) => {
        const data = {
          loading,
          error,
          params: { page },
          data: communityMembers,
        };

        if (result) {
          data.data = [
            ...new Set([...communityMembers, ...result.map(getResolver('communityUsers'))]),
          ];
        }

        pushToCache(cacheKey, data);

        responder(data);
      },
      queryOptions(policy),
    );
  };

  disposers.push(
    onCommunityLeft(realtimeRouter('onLeft')),
    onCommunityJoined(realtimeRouter('onJoin')),
    onCommunityUserBanned(realtimeRouter('onBan')),
    onCommunityUserUnbanned(realtimeRouter('onUnban')),
    onCommunityUserChanged(realtimeRouter('onMemberCountChanged')),
    onCommunityUserRoleAdded(realtimeRouter('onMemberCountChanged')),
    onCommunityUserRoleRemoved(realtimeRouter('onMemberCountChanged')),
  );

  onFetch();

  return () => {
    log(`liveCommunityMembers(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
