import { disableCache, enableCache } from '~/cache/api';

import {
  client,
  connectClient,
  disconnectClient,
  channel1,
  rawChannelUser,
  rawChannelUser3,
  user11,
  user12,
  channelRaw1,
} from '~/utils/tests';

import { onChannelMemberUnbanned } from '../onChannelMemberUnbanned';

describe('onChannelMemberBanned event', () => {
  beforeAll(async () => {
    await connectClient();
  });

  afterAll(async () => {
    await disconnectClient();
  });

  beforeEach(enableCache);

  afterEach(disableCache);

  const channelPayload: Amity.ChannelMembershipPayload = {
    channelUsers: [rawChannelUser, rawChannelUser3],
    channels: [channelRaw1],
    files: [],
    users: [user11, user12],
  };

  test('it should call callback with channel and unbanned member', () => {
    const callback = jest.fn();

    const unsub = onChannelMemberUnbanned(callback);
    client.emitter.emit('channel.unbanned', channelPayload);

    unsub();

    expect(callback).toHaveBeenCalled();
    expect(callback).toHaveBeenCalledWith(channel1, { ...rawChannelUser3, user: user12 });
  });

  test('it should return an Unsubscriber', () => {
    const callback = jest.fn();

    const unsub = onChannelMemberUnbanned(callback);
    unsub();

    client.emitter.emit('channel.unbanned', channelPayload);

    expect(callback).not.toHaveBeenCalled();
  });
});
