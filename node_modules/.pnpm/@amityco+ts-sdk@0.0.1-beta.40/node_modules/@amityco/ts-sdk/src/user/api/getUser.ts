import { getActiveClient } from '~/client/api';

import { pullFromCache } from '~/cache/api';
import { ingestInCache } from '~/cache/api/ingestInCache';
import { fireEvent } from '~/core/events';

import { isInTombstone } from '~/cache/api/isInTombstone';
import { checkIfShouldGoesToTombstone } from '~/cache/utils';
import { pushToTombstone } from '~/cache/api/pushToTombstone';

/**
 * ```js
 * import { getUser } from '@amityco/ts-sdk'
 * const { data: user } = await getUser('foobar')
 * ```
 *
 * Fetches a {@link Amity.User} object
 *
 * @param userId the ID of the {@link Amity.User} to fetch
 * @returns the associated {@link Amity.User} object
 *
 * @category User API
 * @async
 */
export const getUser = async (
  userId: Amity.User['userId'],
  isLive = false,
): Promise<Amity.Cached<Amity.User>> => {
  const client = getActiveClient();
  client.log('user/getUser', userId);

  if (!isLive) {
    console.log('getUser will be deprecated on 25th November 2022, please use liveUser instead.');
  }

  isInTombstone('user', userId);

  let data: Amity.UserPayload;

  try {
    const response = await client.http.get<Amity.UserPayload>(
      `/api/v3/users/${encodeURIComponent(userId)}`,
    );

    data = response.data;
  } catch (error) {
    if (checkIfShouldGoesToTombstone((error as Amity.ErrorResponse)?.code)) {
      pushToTombstone('user', userId);
    }

    throw error;
  }

  const cachedAt = client.cache && Date.now();
  if (client.cache) ingestInCache(data, { cachedAt });

  const { users } = data;

  fireEvent('user.fetched', data);

  return {
    data: users.find(user => user.userId === userId)!,
    cachedAt,
  };
};

/**
 * ```js
 * import { getUser } from '@amityco/ts-sdk'
 * const { data: user } = getUser.locally('foobar')
 * ```
 *
 * Fetches a {@link Amity.User} object from cache
 *
 * @param userId the ID of the {@link Amity.User} to fetch
 * @returns the associated {@link Amity.User} object
 *
 * @category User API
 */
getUser.locally = (userId: Amity.User['userId']): Amity.Cached<Amity.User> | undefined => {
  const client = getActiveClient();
  client.log('user/getUser.locally', userId);

  return client.cache && pullFromCache<Amity.User>(['user', 'get', userId]);
};
