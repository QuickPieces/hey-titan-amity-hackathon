import { getActiveClient } from '~/client/api';
import { createEventSubscriber } from '~/core/events';

import { ingestInCache } from '~/cache/api/ingestInCache';

import { prepareChannelPayload } from '../utils';

/**
 * ```js
 * import { onChannelMuted } from '@amityco/ts-sdk'
 * const dispose = onChannelMuted(channel => {
 *   // ...
 * })
 * ```
 *
 * Fired when any {@link Amity.Channel} have been muted
 *
 * @param callback The function to call when the event was fired
 * @returns an {@link Amity.Unsubscriber} function to stop listening
 *
 * @category Channel Events
 */
export const onChannelMuted = (callback: Amity.Listener<Amity.Channel>) => {
  const client = getActiveClient();

  const filter = (payload: Amity.ChannelPayload) => {
    const data = prepareChannelPayload(payload);

    ingestInCache(data);
    callback(data.channels[0]);
  };

  return createEventSubscriber(client, 'onChannelMuted', 'channel.setMuted', filter);
};
