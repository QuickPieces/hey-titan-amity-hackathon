import { getActiveClient } from '~/client/api';

import { ingestInCache } from '~/cache/api/ingestInCache';
import { prepareMembershipPayload } from '~/group/utils';

/**
 * ```js
 * import { removeCommunityMembersRoles } from '@amityco/ts-sdk'
 * const updated = await removeCommunityMembersRoles(communityId,  ['foo'], ['bar'])
 * ```
 *
 * Removes a list of {@link Amity.Role} from a list of {@link Amity.User} on a {@link Amity.Community}
 *
 * @param communityId The ID of the {@link Amity.Community} to perform
 * @param roleIds Array of IDs of the {@link Amity.Role} to apply
 * @param userIds Array of IDs of the {@link Amity.User} to perform
 * @returns A success boolean if the {@link Amity.Role} were removed from list of {@link Amity.User} in the {@link Amity.Community}
 *
 * @category Community API
 * @async
 */
export const removeCommunityMembersRoles = async (
  communityId: Amity.Community['communityId'],
  roleIds: Amity.Role['roleId'][],
  userIds: Amity.User['userId'][],
): Promise<boolean> => {
  const client = getActiveClient();
  client.log('community/removeCommunityMembersRoles', communityId, roleIds, userIds);

  const { data: payload } = await client.http.delete<Amity.CommunityMembershipPayload>(
    `/api/v4/communities/${communityId}/users/roles`,
    { data: { communityId, roles: roleIds, userIds } },
  );

  const data = prepareMembershipPayload(payload, 'communityUsers');

  if (client.cache) ingestInCache(data);

  const { communityUsers } = data;
  return !!communityUsers.find(
    communityUser =>
      communityUser.communityId === communityId &&
      !roleIds.some(role => communityUser.roles.includes(role)),
  );
};
