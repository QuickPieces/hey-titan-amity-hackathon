import { getResolver } from '~/core/model';
import { pullFromCache } from '~/cache/api';
// Note:
// this file should contain a suite of filtering utilities to help the
// local version of the query functions.

/**
 * Filter a given collection with strict equality against a param
 *
 * @param collection the collection to filter
 * @param key the key of the collection's items to challenge
 * @param value the expected value
 * @returns a filtered collection with items only matching the criteria
 *
 * @hidden
 */
export const filterByPropEquality = <T = Record<string, unknown>>(
  collection: T[],
  key: keyof T,
  value: any,
) => (value !== undefined ? collection.filter(item => item[key] === value) : collection);

export const filterByPropInclusion = <T = Record<string, unknown>>(
  collection: T[],
  key: keyof T,
  value: any[] | undefined,
) => (value !== undefined ? collection.filter(item => value.includes(item[key])) : collection);

/**
 * Filter a channel collection by membership of the userId
 *
 * @param collection the channel collection to filter
 * @param membership the membership to be filtered by
 * @param userId user id to be filtered by
 * @returns a filtered collection with items only matching the criteria
 *
 * @hidden
 */
export const filterByChannelMembership = (
  collection: Amity.Channel[],
  membership: Amity.ChannelLiveCollection['membership'],
  userId: Amity.Membership<'channel'>['userId'],
): Amity.Channel[] => {
  if (membership === 'all') {
    return collection;
  }

  return collection.filter(c => {
    // get resolver for the channel by user
    const channelUserCacheKey = getResolver('channelUsers')({
      channelId: c.channelId,
      userId,
    });

    const channelUser = pullFromCache<Amity.Membership<'channel'>>([
      'channelUsers',
      'get',
      channelUserCacheKey,
    ])?.data;

    if (membership === 'member') {
      return channelUser && channelUser.membership !== 'none';
    }

    // only membership value remainging is 'notMember'
    return !channelUser || channelUser.membership === 'none';
  });
};

/**
 * Filter a channel collection by membership of the userId
 *
 * @param collection the channel collection to filter
 * @param feedType to be filtered by
 * @returns a filtered collection with items only matching the criteria
 *
 * @hidden
 */
export const filterByFeedType = <T extends Amity.Post>(
  collection: T[],
  feedType: Amity.Feed['feedType'],
): T[] => {
  /*
   * It is possible that the targetId & feedId are the same for most of the posts
   * But since cache is in-memory, i've avoided memoizing, to avoid premature
   * optimization. Can be revisited if performance issues arise
   */
  return collection.filter(({ targetId, feedId }) => {
    const feed = pullFromCache<Amity.Feed>([
      'feed',
      'get',
      getResolver('feed')({ targetId, feedId }),
    ])?.data!;

    return feed && feed.feedType === feedType;
  });
};
