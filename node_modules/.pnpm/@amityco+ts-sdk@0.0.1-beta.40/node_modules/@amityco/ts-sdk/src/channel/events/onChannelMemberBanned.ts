import { getActiveClient } from '~/client/api';
import { createEventSubscriber } from '~/core/events';

import { ingestInCache } from '~/cache/api/ingestInCache';

import { prepareChannelPayload } from '../utils';

/**
 * ```js
 * import { onChannelMemberBanned } from '@amityco/ts-sdk'
 * const dispose = onChannelMemberBanned((channel, member) => {
 *   // ...
 * })
 * ```
 *
 * Fired when any {@link Amity.User} has been banned from any {@link Amity.Channel}
 *
 * @param callback The function to call when the event was fired
 * @returns an {@link Amity.Unsubscriber} function to stop listening
 *
 * @category Channel Events
 */
export const onChannelMemberBanned = (
  callback: (channel: Amity.Channel, member: Amity.Membership<'channel'>) => void,
) => {
  const client = getActiveClient();

  const filter = (payload: Amity.ChannelMembershipPayload) => {
    const preparedPayload = prepareChannelPayload(payload);
    const { channels, channelUsers } = preparedPayload;

    ingestInCache(preparedPayload);
    callback(channels[0], channelUsers.find(cu => cu.membership === 'banned')!);
  };

  return createEventSubscriber(client, 'onChannelMemberBanned', 'channel.banned', filter);
};
