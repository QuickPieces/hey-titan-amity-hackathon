import nock from 'nock';

import { ASCApiError, ASCUnknownError } from '~/core/errors';
import { createFileFormData } from '~/utils/tests';

import { createHttpTransport } from '../http';

const baseUrl = 'https://non-exist.domain';

describe('core/transports', () => {
  describe('createHttpTransport', () => {
    beforeAll(nock.disableNetConnect);
    beforeEach(nock.cleanAll);

    test('should create axios instance with out error', () => {
      nock(baseUrl).get(/./).reply(200);

      expect(createHttpTransport(baseUrl)).not.toThrow();
    });

    test('instance should resolved http request', async () => {
      const expectedResolveValue = { foo: 'bar' };
      nock(baseUrl).get('/foo').reply(200, expectedResolveValue);

      const instance = createHttpTransport(baseUrl);

      const expected = expect.objectContaining({ data: expectedResolveValue });
      await expect(instance.get('/foo')).resolves.toEqual(expected);
    });

    test('instance should throw Error when got 400 response code', async () => {
      nock(baseUrl).get('/foo').reply(400);

      const instance = createHttpTransport(baseUrl);

      await expect(instance.get('/foo')).rejects.toThrow(Error);
    });

    test('instance should throw Error when got 500 response code', async () => {
      nock(baseUrl).get('/foo').reply(500);

      const instance = createHttpTransport(baseUrl);

      await expect(instance.get('/foo')).rejects.toThrow(Error);
    });

    test('instance should throw `ASCUnknownError` when got `fail` status in payload', async () => {
      nock(baseUrl).get('/foo').reply(500, { status: 'fail', message: 'something fail' });

      const instance = createHttpTransport(baseUrl);

      await expect(instance.get('/foo')).rejects.toThrow(ASCUnknownError);
    });

    test('instance should throw `ASCApiError` when got `error` status in payload', async () => {
      nock(baseUrl).get('/foo').reply(500, { status: 'error', message: 'something error' });

      const instance = createHttpTransport(baseUrl);

      await expect(instance.get('/foo')).rejects.toThrow(ASCApiError);
    });

    test('instance should receive formData', async () => {
      const formData = createFileFormData();
      nock(baseUrl).post('/foo').reply(200);

      const instance = createHttpTransport(baseUrl);

      await expect(instance.post('/foo', formData)).resolves.not.toThrow();
    });
  });
});
