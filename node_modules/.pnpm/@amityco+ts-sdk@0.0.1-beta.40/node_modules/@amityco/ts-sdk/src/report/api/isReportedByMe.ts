import { getActiveClient } from '~/client/api/activeClient';
import { synchronousWSCall } from '~/core/transports';
import REFERENCE_TYPES from '../constants/referenceTypes';

/**
 * ```js
 * import { isReportedByMe } from '@amityco/ts-sdk'
 * const isReported = await isReportedByMe('post', postId)
 * ```
 *
 * @param referenceType The type of thing to check a report to, such as a post or a comment.
 * @param referenceId The ID of the thing to check a report to.
 * @returns `true` if the report is created by me, `false` if doesn't.
 *
 * @category Report API
 * @async
 * */
export const isReportedByMe = async (
  referenceType: keyof typeof REFERENCE_TYPES,
  referenceId: string,
): Promise<boolean> => {
  const client = getActiveClient();
  client.log('report/isReportedByMe', { referenceType, referenceId });

  const { eventName, primaryKey } = REFERENCE_TYPES[referenceType];

  if (referenceType === 'message') {
    const { data } = await client.http.get<{ result: boolean }>(
      `/api/v5/messages/${encodeURIComponent(referenceId)}/flags`,
    );

    return data.result;
  }

  const { result, isFlagByMe } =
    (await synchronousWSCall<{
      result?: boolean;
      isFlagByMe?: boolean;
    }>(client, eventName, {
      [primaryKey]: referenceId,
    })) ?? {};

  return result ?? isFlagByMe ?? false;
};
