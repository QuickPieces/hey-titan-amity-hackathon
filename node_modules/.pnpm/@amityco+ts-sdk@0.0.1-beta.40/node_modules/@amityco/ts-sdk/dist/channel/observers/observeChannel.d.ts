/**
 * ```js
 * import { observeChannel } from '@amityco/ts-sdk'
 *
 * let channel = {}
 * const dispose = observeChannel(channelId, ({ data }) => channel = data)
 * ```
 *
 * Observe all mutation on a given {@link Amity.Channel}
 *
 * @param channelId the ID of the channel to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the channel
 *
 * @category Channel Observer
 */
export declare const observeChannel: <Events extends ["onFetch" | "onUpdate" | "onDelete" | "onJoin" | "onLeft" | "onMute" | "onMemberAdded" | "onMemberRemoved"]>(channelId: string, callback: Amity.ObjectListener<Amity.Snapshot<Amity.Channel<any>>, Events>) => Amity.Unsubscriber;
//# sourceMappingURL=observeChannel.d.ts.map