import { getActiveClient } from '~/client/api';

import {
  onCommentCreated,
  onCommentUpdated,
  onCommentDeleted,
  onCommentFlagged,
  onCommentUnflagged,
  onCommentReactionAdded,
  onCommentReactionRemoved,
} from '../events';

/**
 * ```js
 * import { observeComments } from '@amityco/ts-sdk'
 *
 * let comments = []
 * const unsub = observeComments(postId, comment => merge(comments, comment))
 * ```
 *
 * Observe all mutations on a list of {@link Amity.Comment} for a given {@link Amity.Post} object
 *
 * @param postId the ID of the post where to observe the comments
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the comments
 *
 * @category Comment Observer
 */
export const observeComments = (
  postId: Amity.Post['postId'],
  callback: Amity.ObjectListener<
    Amity.Comment,
    [
      'onCreate',
      'onUpdate',
      'onDelete',
      'onFlagged',
      'onUnflagged',
      'onReactionAdded',
      'onReactionRemoved',
    ]
  >,
): Amity.Unsubscriber => {
  const { log } = getActiveClient();

  const timestamp = Date.now();
  log(`observeComments(tmpid: ${timestamp}) > listen`);

  const disposers: Amity.Unsubscriber[] = [];

  const router = (comment: Amity.Comment, action: Exclude<Amity.CommentActionType, 'onFetch'>) => {
    if (comment.referenceId !== postId) return;

    if (callback instanceof Function) return callback(comment);

    callback.onEvent?.(action, comment);
    callback[action]?.(comment);
  };

  disposers.push(
    onCommentCreated(comment => router(comment, 'onCreate')),
    onCommentUpdated(comment => router(comment, 'onUpdate')),
    onCommentDeleted(comment => router(comment, 'onDelete')),
    onCommentFlagged(comment => router(comment, 'onFlagged')),
    onCommentUnflagged(comment => router(comment, 'onUnflagged')),
    onCommentReactionAdded(comment => router(comment, 'onReactionAdded')),
    onCommentReactionRemoved(comment => router(comment, 'onReactionRemoved')),
  );

  return () => {
    log(`observeComments(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
