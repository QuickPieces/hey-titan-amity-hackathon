import { channel1, client } from '~/utils/tests';

import { startReading } from '../startReading';

const resolvedSuccessValue = { status: 'success', data: {} };
const resolvedErrorValue = { status: 'error', message: 'error', code: 500000 };

// FIXME: wait for marker service
xdescribe('startReading', () => {
  test('should resolves true value', async () => {
    client.ws.emit = jest
      .fn()
      .mockImplementationOnce((event, data, callback) => callback(resolvedSuccessValue));

    await expect(startReading(channel1.channelId)).resolves.toEqual(true);
  });

  test('should throw an error if request fails', async () => {
    client.ws.emit = jest
      .fn()
      .mockImplementationOnce((event, data, callback) => callback(resolvedErrorValue));

    await expect(startReading(channel1.channelId)).rejects.toThrow(resolvedErrorValue.message);
  });
});
