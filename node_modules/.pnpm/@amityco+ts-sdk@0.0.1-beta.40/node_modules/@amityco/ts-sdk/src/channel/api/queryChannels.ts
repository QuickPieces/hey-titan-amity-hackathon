import { getActiveClient } from '~/client/api';

import { toPage, toToken } from '~/core/query';
import { getResolver } from '~/core/model';

import { pushToCache, pullFromCache } from '~/cache/api';
import { ingestInCache } from '~/cache/api/ingestInCache';

import { prepareChannelPayload } from '../utils';

/**
 * ```js
 * import { queryChannels } from '@amityco/ts-sdk'
 * const channels = await queryChannels()
 * ```
 *
 * Queries a paginable list of {@link Amity.Channel} objects
 * Search is performed by displayName such as `.startsWith(search)`
 *
 * @param query The query parameters
 * @returns A page of {@link Amity.Channel} objects
 *
 * @category Channel API
 * @async
 */
export const queryChannels = async (
  query?: Amity.QueryChannels,
): Promise<Amity.Cached<Amity.Paged<Amity.Channel>>> => {
  const client = getActiveClient();
  client.log('channel/queryChannels', query);

  // safe decapsulation
  const { page = { limit: 10 }, displayName, membership, ...params } = query ?? {};

  // API-FIX: parameters should be querystring.
  // API-FIX: backend doesnt answer Amity.Response
  // const { data } = await client.http.get<Amity.Response<Amity.Paged<ChannelPayload>>>(
  const { data: queryPayload } = await client.http.get<Amity.ChannelPayload & Amity.Pagination>(
    `/api/v3/channels`,
    {
      params: {
        ...params,
        keyword: displayName,
        filter: membership,
        options: {
          token: toToken(page, 'skiplimit'),
        },
      },
    },
  );

  const { paging, ...payload } = queryPayload;

  const data = prepareChannelPayload(payload);

  const { channels } = data;

  const cachedAt = client.cache && Date.now();

  if (client.cache) {
    ingestInCache(data, { cachedAt });

    const cacheKey = [
      'channel',
      'query',
      { ...params, options: { ...page } } as Amity.Serializable,
    ];
    pushToCache(cacheKey, { channels: channels.map(getResolver('channel')), paging });
  }

  const nextPage = toPage(paging.next);
  const prevPage = toPage(paging.previous);

  return { data: channels, cachedAt, prevPage, nextPage };
};

/**
 * ```js
 * import { queryChannels } from '@amityco/ts-sdk'
 * const channels = queryChannels.locally()
 * ```
 *
 * Queries a paginable list of {@link Amity.Channel} objects from cache
 *
 * @param query The query parameters
 * @returns channels
 *
 * @category Channel API
 */
queryChannels.locally = (
  query?: Parameters<typeof queryChannels>[0],
): Amity.Cached<Amity.Paged<Amity.Channel>> | undefined => {
  const client = getActiveClient();
  client.log('channel/queryChannels.locally', query);

  const { page = { limit: 10 }, ...params } = query ?? {};

  const cacheKey = ['channel', 'query', { ...params, options: { ...page } } as Amity.Serializable];

  const { data, cachedAt } =
    pullFromCache<
      {
        channels: Pick<Amity.Channel, 'channelId'>[];
      } & Amity.Pagination
    >(cacheKey) ?? {};

  if (!data?.channels.length) return;

  const channels: Amity.Channel[] = data.channels
    // ck -> cacheKey, abbrevated to avoid confusion from the above cache key
    .map(ck => pullFromCache<Amity.Channel>(['channel', 'get', ck])!)
    .filter(Boolean)
    .map(({ data }) => data);

  const prevPage = toPage(data?.paging.previous);
  const nextPage = toPage(data?.paging.next);

  return channels.length === data?.channels?.length
    ? { data: channels, cachedAt, prevPage, nextPage }
    : undefined;
};
