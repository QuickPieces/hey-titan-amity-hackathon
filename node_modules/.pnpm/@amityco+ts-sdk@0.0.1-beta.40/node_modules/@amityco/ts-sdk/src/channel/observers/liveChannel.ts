import { liveObject } from '~/utils/liveObject';
import { onMessageCreated } from '~/message/events';
import { getChannel } from '../api';
import { onChannelDeleted, onChannelJoined, onChannelMuted, onChannelUpdated } from '../events';

/**
 * ```js
 * import { liveChannel } from '@amityco/ts-sdk';
 *
 * let channel;
 *
 * const unsubscribe = liveChannel(channelId, response => {
 *   channel = response.data;
 * });
 * ```
 *
 * Observe all mutation on a given {@link Amity.Channel}
 *
 * @param channelId the ID of the channel to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the channel
 *
 * @category Message Live Object
 */
export const liveChannel = (
  channelId: Amity.Channel['channelId'],
  callback: Amity.LiveObjectCallback<Amity.Channel>,
): Amity.Unsubscriber => {
  return liveObject(channelId, callback, 'channelId', getChannel, [
    onChannelUpdated,
    onChannelDeleted,
    onChannelJoined,
    onChannelMuted,
    () => onMessageCreated(() => null), // watch unread count
  ]);
};
