import { liveObject } from '~/utils/liveObject';
import { getSubChannel } from '../api';
import { onSubChannelDeleted, onSubChannelUpdated } from '../events';
import { onSubChannelFetched } from '../events/onSubChannelFetched';

/**
 * ```js
 * import { liveSubChannel } from '@amityco/ts-sdk';
 *
 * let subChannel;
 *
 * const unsubscribe = liveSubChannel(subChannelId, response => {
 *   subChannel = response.data;
 * });
 * ```
 *
 * Observe all mutation on a given {@link Amity.SubChannel}
 *
 * @param subChannelId the ID of the message to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the sub channel
 *
 * @category SubChannel Live Object
 */
export const liveSubChannel = (
  subChannelId: Amity.SubChannel['subChannelId'],
  callback: Amity.LiveObjectCallback<Amity.SubChannel>,
): Amity.Unsubscriber => {
  return liveObject(subChannelId, callback, 'subChannelId', getSubChannel, [
    onSubChannelFetched,
    onSubChannelUpdated,
    onSubChannelDeleted,
  ]);
};
