import { getActiveClient } from '~/client/api';
import { ingestInCache } from '~/cache/api/ingestInCache';
import { createEventSubscriber } from '~/core/events';
import { queryCache, upsertInCache } from '~/cache/api';

export const createFollowEventSubscriber = (
  event: keyof Amity.MqttFollowEvents,
  callback: Amity.Listener<Amity.FollowStatus>,
) => {
  const client = getActiveClient();

  const filter = (payload: Amity.FollowersPayload | Amity.FollowStatusPayload) => {
    if (!client.cache) {
      callback(payload.follows[0]);
    } else {
      ingestInCache(payload);

      const queries = [
        ...(queryCache(['followers', 'query']) ?? []),
        ...(queryCache(['followings', 'query']) ?? []),
      ];

      queries
        .filter(
          ({ key }) =>
            // @ts-ignore
            key[2].userId === payload.follows[0].from || key[2].userId === payload.follows[0].to,
        )
        .forEach(({ key, data }) => upsertInCache(key, data as any, { cachedAt: -1 }));

      callback(payload.follows[0]);
    }
  };

  return createEventSubscriber(client, event, event, filter);
};
