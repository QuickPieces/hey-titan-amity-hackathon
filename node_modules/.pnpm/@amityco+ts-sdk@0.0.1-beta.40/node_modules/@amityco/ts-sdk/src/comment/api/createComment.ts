import { getActiveClient } from '~/client/api';

import { ingestInCache } from '~/cache/api/ingestInCache';
import { fireEvent } from '~/core/events';

import { getPost } from '~/post/api/getPost';

/**
 * ```js
 * import { createComment } from '@amityco/ts-sdk'
 * const newComment = await createComment(bundle)
 * ```
 *
 * Creates an {@link Amity.Comment}
 *
 * @param bundle The data necessary to create a new {@link Amity.Comment}
 * @returns The newly created {@link Amity.Comment}
 *
 * @category Comment API
 * @async
 */
export const createComment = async (
  bundle: Pick<
    Amity.Comment<Amity.CommentContentType>,
    | 'data'
    | 'referenceType'
    | 'referenceId'
    | 'parentId'
    | 'metadata'
    | 'mentionees'
    | 'attachments'
  >,
): Promise<Amity.Cached<Amity.Comment>> => {
  const client = getActiveClient();
  client.log('comment/createComment', bundle);

  const { data } = await client.http.post<Amity.CommentPayload>('/api/v3/comments', bundle);

  const cachedAt = client.cache && Date.now();
  if (client.cache) ingestInCache(data, { cachedAt });

  const post = await getPost(bundle.referenceId);

  fireEvent('post.updated', {
    posts: [post.data],
    categories: [],
    comments: [],
    communities: [],
    communityUsers: [],
    feeds: [],
    files: [],
    postChildren: [],
    users: [],
  });
  fireEvent('comment.created', data);

  const { comments } = data;
  return {
    data: comments[0],
    cachedAt,
  };
};
