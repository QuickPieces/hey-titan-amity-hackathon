/* eslint-disable no-use-before-define */
import { getResolver } from '~/core/model';
import { pullFromCache, pushToCache } from '~/cache/api';
import { getActiveClient } from '~/client/api';
import {
  createQuery,
  runQuery,
  queryOptions,
  filterByPropEquality,
  sortByLastCreated,
  sortByDisplayName,
  sortByFirstCreated,
} from '~/core/query';
import {
  COLLECTION_DEFAULT_CACHING_POLICY,
  COLLECTION_DEFAULT_PAGINATION_LIMIT,
  ENABLE_CACHE_MESSAGE,
} from '~/utils/constants';
import {
  onCommunityCreated,
  onCommunityDeleted,
  onCommunityUpdated,
  onCommunityJoined,
  onCommunityLeft,
  onCommunityUserChanged,
} from '../events';
import { queryCommunities } from '../api';

/**
 * ```js
 * import { liveCommunities } from '@amityco/ts-sdk'
 *
 * let communities = []
 * const unsub = liveCommunities({
 *   displayName: Amity.Community['displayName'],
 * }, response => merge(communities, response.data))
 * ```
 *
 * Observe all mutations on a list of {@link Amity.Community}s
 *
 * @param params for querying communities
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the communities
 *
 * @category Community Live Collection
 */
export const liveCommunities = (
  params: Amity.CommunityLiveCollection,
  callback: Amity.LiveCollectionCallback<Amity.Community>,
  config?: Amity.LiveCollectionConfig,
) => {
  const { log, cache } = getActiveClient();

  if (!cache) {
    console.log(ENABLE_CACHE_MESSAGE);
  }

  const timestamp = Date.now();
  log(`liveCommunities(tmpid: ${timestamp}) > listen`);

  const { limit: queryLimit, ...queryParams } = params;

  const limit = queryLimit ?? COLLECTION_DEFAULT_PAGINATION_LIMIT;
  const { policy = COLLECTION_DEFAULT_CACHING_POLICY } = config ?? {};

  const disposers: Amity.Unsubscriber[] = [];
  const cacheKey = ['community', 'collection', {}];

  const responder = (data: Amity.CommunityLiveCollectionCache) => {
    let communities: Amity.Community[] =
      data.data
        .map(communityId => pullFromCache<Amity.Community>(['community', 'get', communityId])!)
        .filter(Boolean)
        .map(({ data }) => data) ?? [];

    communities = filterByPropEquality(communities, 'isDeleted', params.isDeleted);
    communities = filterByPropEquality(communities, 'displayName', params.displayName);

    if (params.categoryId) {
      communities = communities.filter(c => c.categoryIds?.includes(params.categoryId!));
    }

    if (params.tags) {
      communities = communities.filter(c => c.tags?.some(t => params.tags?.includes(t)));
    }

    if (params.membership === 'member') {
      communities = filterByPropEquality(communities, 'isJoined', true);
    }

    if (params.membership === 'notMember') {
      communities = filterByPropEquality(communities, 'isJoined', false);
    }

    const sortBy = params.sortBy || 'lastCreated';

    if (sortBy === 'lastCreated' || sortBy === 'firstCreated') {
      communities = communities.sort(
        sortBy === 'lastCreated' ? sortByLastCreated : sortByFirstCreated,
      );
    }

    /*
     * The server returns communities with empty | null displayName's first before
     * returning sorted list of communities with displayNames
     *
     * This section needs to be updated as displayNames can be null as well
     */
    if (sortBy === 'displayName') {
      communities = communities
        // this needs to be aligned with the backend data type
        .map(c => (c.displayName ? c : { ...c, displayName: '' }))
        // @ts-ignore
        .sort(sortByDisplayName);
    }

    callback({
      onNextPage: onFetch,
      data: communities,
      hasNextPage: !!data.params?.page,
      loading: data.loading,
      error: data.error,
    });
  };

  const realtimeRouter = (_: Amity.CommunityActionType) => (community: Amity.Community) => {
    const collection = pullFromCache<Amity.CommunityLiveCollectionCache>(cacheKey)?.data;
    if (!collection) return;

    /*
     * Simply update collection and let responder decide what to do with data
     */
    collection.data = [...new Set([community.communityId, ...collection.data])];

    pushToCache(cacheKey, collection);
    responder(collection);
  };

  const onFetch = () => {
    const collection = pullFromCache<Amity.CommunityLiveCollectionCache>(cacheKey)?.data;

    const communities = collection?.data ?? [];

    if (communities.length > 0 && !collection?.params.page) return;

    const query = createQuery(queryCommunities, {
      ...queryParams,
      page: collection?.params.page ?? { limit },
    });

    runQuery(
      query,
      ({ data: result, error, loading, nextPage: page }) => {
        const data = {
          loading,
          error,
          params: { page },
          data: communities,
        };

        if (result) {
          data.data = [...new Set([...communities, ...result.map(getResolver('community'))])];
        }

        pushToCache(cacheKey, data);

        responder(data);
      },
      queryOptions(policy),
    );
  };

  disposers.push(
    onCommunityCreated(realtimeRouter('onCreate')),
    onCommunityDeleted(realtimeRouter('onDelete')),
    onCommunityUpdated(realtimeRouter('onUpdate')),
    onCommunityJoined(realtimeRouter('onJoin')),
    onCommunityLeft(realtimeRouter('onLeft')),
    onCommunityUserChanged(realtimeRouter('onMemberCountChanged')),
  );

  onFetch();

  return () => {
    log(`liveCommunities(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
