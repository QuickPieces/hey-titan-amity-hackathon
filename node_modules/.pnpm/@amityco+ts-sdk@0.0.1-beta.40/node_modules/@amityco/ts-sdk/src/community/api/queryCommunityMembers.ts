import { pullFromCache, pushToCache } from '~/cache/api';
import { getActiveClient } from '~/client/api';
import { getResolver } from '~/core/model';

import { toPage, toToken } from '~/core/query';
import { ingestInCache } from '~/cache/api/ingestInCache';
import { prepareMembershipPayload } from '~/group/utils';

/**
 * ```js
 * import { queryCommunityMembers } from '@amityco/ts-sdk'
 * const communityMembers = await queryCommunityMembers({ communityId: 'foo' })
 * ```
 *
 * Queries a paginable list of {@link Amity.CommunityUser} objects
 *
 * @param query The query parameters
 * @returns A page of {@link Amity.CommunityUser} objects
 *
 * @category Community API
 * @async
 * */
export const queryCommunityMembers = async (
  query: Amity.QueryCommunityMembers,
): Promise<Amity.Cached<Amity.Paged<Amity.Membership<'community'>>>> => {
  const client = getActiveClient();
  client.log('community/queryCommunityMembers', query);

  const { page, ...params } = query ?? {};

  const { data: queryPayload } = await client.http.get<
    Amity.CommunityMembershipPayload & Amity.Pagination
  >(`/api/v3/communities/${params.communityId}/users`, {
    params: {
      ...params,
      options: {
        token: toToken(page, 'skiplimit'),
      },
    },
  });

  const { paging, ...payload } = queryPayload;
  const preparedPayload = prepareMembershipPayload(payload, 'communityUsers');
  const { communityUsers } = preparedPayload;

  const cachedAt = client.cache && Date.now();
  if (client.cache) {
    ingestInCache(preparedPayload, { cachedAt });

    const cacheKey = [
      'communityUsers',
      'query',
      { ...params, options: { ...page } } as Amity.Serializable,
    ];

    pushToCache(cacheKey, {
      communityUsers: communityUsers.map(({ communityId, userId }) =>
        getResolver('communityUsers')({ communityId, userId }),
      ),
      paging,
    });
  }

  const nextPage = toPage(paging.next);
  const prevPage = toPage(paging.previous);

  return { data: communityUsers, cachedAt, nextPage, prevPage };
};

/**
 * ```js
 * import { queryCommunityMembers } from '@amityco/ts-sdk'
 * const communityMembers = await queryCommunityMembers(query)
 * ```
 *
 * Queries a paginable list of {@link Amity.Post} objects from cache
 *
 * @param query The query parameters
 * @returns posts
 *
 * @category Post API
 */
queryCommunityMembers.locally = (query: Parameters<typeof queryCommunityMembers>[0]) => {
  const client = getActiveClient();
  client.log('community/queryCommunityMembers', query);

  if (!client.cache) return;

  const { page, ...params } = query ?? {};

  const cacheKey = [
    'communityUsers',
    'query',
    { ...params, options: { ...page } } as Amity.Serializable,
  ];

  const { data, cachedAt } =
    pullFromCache<
      {
        communityUsers: Pick<Amity.Membership<'community'>, 'communityId' | 'userId'>[];
      } & Amity.Pagination
    >(cacheKey) ?? {};

  if (!data?.communityUsers.length) return;

  const communityUsers: Amity.Membership<'community'>[] = data.communityUsers
    .map(key => pullFromCache<Amity.Membership<'community'>>(['communityUsers', 'get', key])!)
    .filter(Boolean)
    .map(({ data }) => data);

  const prevPage = toPage(data?.paging.previous);
  const nextPage = toPage(data?.paging.next);

  return communityUsers.length === data?.communityUsers?.length
    ? { data: communityUsers, cachedAt, prevPage, nextPage }
    : undefined;
};
