import { createQuery, runQuery } from '~/core/query/query';

import { getActiveClient } from '~/client/api';

import { getChannel } from '../api';

import {
  onChannelUpdated,
  onChannelDeleted,
  onChannelJoined,
  onChannelLeft,
  onChannelMuted,
  onChannelMemberAdded,
  onChannelMemberRemoved,
} from '../events';

/**
 * ```js
 * import { observeChannel } from '@amityco/ts-sdk'
 *
 * let channel = {}
 * const dispose = observeChannel(channelId, ({ data }) => channel = data)
 * ```
 *
 * Observe all mutation on a given {@link Amity.Channel}
 *
 * @param channelId the ID of the channel to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the channel
 *
 * @category Channel Observer
 */
export const observeChannel = <Events extends [Exclude<Amity.ChannelActionType, 'onCreate'>]>(
  channelId: string,
  callback: Amity.ObjectListener<Amity.Snapshot<Amity.Channel>, Events>,
): Amity.Unsubscriber => {
  const { log } = getActiveClient();

  const timestamp = Date.now();
  log(`observeChannel(tmpid: ${timestamp}) > listen`);

  // wrapper function to make sure
  const router = (result: Amity.Snapshot<Amity.Channel>, action: Events[number]) => {
    // filter function
    if (result.data?.channelId !== channelId) return;

    if (callback instanceof Function) return callback(result);

    if (action !== 'onFetch') callback.onEvent?.(action, result);

    callback[action]?.(result);
  };

  const disposers: Amity.Unsubscriber[] = [];

  disposers.push(
    onChannelUpdated(data => router({ data, loading: false, origin: 'event' }, 'onUpdate')),
    onChannelDeleted(data => router({ data, loading: false, origin: 'event' }, 'onDelete')),
    onChannelJoined(data => router({ data, loading: false, origin: 'event' }, 'onJoin')),
    onChannelLeft(data => router({ data, loading: false, origin: 'event' }, 'onLeft')),
    onChannelMuted(data => router({ data, loading: false, origin: 'event' }, 'onMute')),
    onChannelMemberAdded(data =>
      router({ data, loading: false, origin: 'event' }, 'onMemberAdded'),
    ),
    onChannelMemberRemoved(data =>
      router({ data, loading: false, origin: 'event' }, 'onMemberRemoved'),
    ),
  );

  runQuery(createQuery(getChannel, channelId), result => result.data && router(result, 'onFetch'));

  return () => {
    log(`observeChannel(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
