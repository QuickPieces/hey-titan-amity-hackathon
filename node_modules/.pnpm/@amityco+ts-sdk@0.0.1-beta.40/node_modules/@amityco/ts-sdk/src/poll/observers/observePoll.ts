import { getActiveClient } from '~/client/api';

import { createQuery, runQuery, queryOptions } from '~/core/query';

import { getPoll } from '../api';

import { onPollUpdated, onPollDeleted } from '../events';

/**
 * ```js
 * import { observePoll } from '@amityco/ts-sdk'
 *
 * let poll = {}
 * const dispose = observePoll(pollId, updated => poll = updated)
 * ```
 *
 * Observe all mutation on a given {@link Amity.Poll}
 *
 * @param pollId the ID of the poll to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the poll
 *
 * @category Poll Observer
 */
export const observePoll = <Events extends ['onFetch', 'onUpdate', 'onDelete']>(
  pollId: string,
  callback: Amity.ObjectListener<Amity.Snapshot<Amity.Poll | undefined>, Events>,
  policy: Amity.QueryPolicy = 'cache_then_server',
): Amity.Unsubscriber => {
  const { log } = getActiveClient();

  const timestamp = Date.now();
  log(`observePoll(tmpid: ${timestamp}) > listen`);

  // wrapper function to make sure
  const router = (result: Amity.Snapshot<Amity.Poll | undefined>, action: Events[number]) => {
    if (callback instanceof Function) return callback(result);

    if (action !== 'onFetch') callback.onEvent?.(action, result);

    callback[action]?.(result);
  };

  const realtimeRouter = (result: Amity.Snapshot<Amity.Poll>, action: Events[number]) => {
    if (result.data?.pollId !== pollId) return;

    router(result, action);
  };

  const disposers: Amity.Unsubscriber[] = [];

  disposers.push(
    onPollUpdated(data => realtimeRouter({ data, loading: false, origin: 'event' }, 'onUpdate')),
    onPollDeleted(data => realtimeRouter({ data, loading: false, origin: 'event' }, 'onDelete')),
  );

  runQuery(
    createQuery(getPoll, pollId),
    result => (result.data || result.error) && router(result, 'onFetch'),
    queryOptions(policy),
  );

  return () => {
    log(`observePoll(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
