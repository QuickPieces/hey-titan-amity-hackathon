import { ASCApiError } from '~/core/errors';
import { client, emptyPostPayload, posts } from '~/utils/tests';
import { pushToCache, enableCache, disableCache } from '~/cache/api';

import { getPost } from '~/post/api';

describe('post/api', () => {
  const post = { postId: posts.page1[0] };
  const post2 = { postId: posts.page1[1] };

  describe('getPost.locally', () => {
    test('should return undefined if cache is turned off', () => {
      expect(getPost.locally(post.postId)).toBeUndefined();
    });

    test('should return undefined if post not in cache', () => {
      enableCache();

      const cachedAt = Date.now();

      pushToCache(['post', 'get', post.postId], post, { cachedAt });

      expect(getPost.locally(post2.postId)).toBeUndefined();

      disableCache();
    });

    test('should return post if post in cache', () => {
      enableCache();

      const cachedAt = Date.now();

      pushToCache(['post', 'get', post.postId], post, { cachedAt });

      const data = getPost.locally(post.postId);

      expect(data).toBeDefined();
      expect(data?.data).toEqual(post);
      expect(data?.cachedAt).toEqual(cachedAt);

      disableCache();
    });
  });

  describe('getPost', () => {
    test('should return a post', async () => {
      client.http.get = jest.fn().mockReturnValueOnce({
        data: {
          ...emptyPostPayload,
          posts: [post],
        },
      });

      const data = await getPost(post.postId);

      expect(data).toBeDefined();
      expect(data?.data).toEqual(post);
    });

    test('should put post into the cache after fetch', async () => {
      enableCache();
      client.http.get = jest.fn().mockReturnValueOnce({
        data: {
          ...emptyPostPayload,
          posts: [post],
        },
      });

      await getPost(post.postId);

      expect(getPost.locally(post.postId)?.data).toEqual(post);

      disableCache();
    });

    test('should return an error', async () => {
      client.http.get = jest.fn().mockRejectedValueOnce(new Error('error'));

      await expect(getPost(post.postId)).rejects.toThrow('error');
    });

    test('should return an error if post in cache but api throws not found', async () => {
      enableCache();
      pushToCache(['post', 'get', post.postId], post, { cachedAt: Date.now() });

      client.http.get = jest
        .fn()
        .mockRejectedValueOnce(
          new ASCApiError('not found!', Amity.ServerError.ITEM_NOT_FOUND, Amity.ErrorLevel.ERROR),
        );

      await expect(getPost(post.postId)).rejects.toThrow();

      expect(getPost.locally(post.postId)).toBeUndefined();
      disableCache();
    });
  });
});
