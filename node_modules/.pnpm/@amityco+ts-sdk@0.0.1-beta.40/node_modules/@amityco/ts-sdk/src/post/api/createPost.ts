import { getActiveClient } from '~/client/api';

import { ingestInCache } from '~/cache/api/ingestInCache';
import { fireEvent } from '~/core/events';
import { prepareMembershipPayload } from '~/group/utils';

/**
 * ```js
 * import { createPost } from '@amityco/ts-sdk'
 * const created = await createPost({
 *   targetType: 'user',
 *   targetId: 'foobar',
 *   data: { text: 'hello world' }
 * }))
 * ```
 *
 * Creates an {@link Amity.Post}
 *
 * @param bundle The data necessary to create a new {@link Amity.Post}
 * @returns The newly created {@link Amity.Post}
 *
 * @category Post API
 * @async
 */
export const createPost = async <T extends Amity.PostContentType | string>(
  bundle: Pick<Amity.Post, 'targetType' | 'targetId' | 'metadata' | 'mentionees' | 'tags'> & {
    dataType?: T;
    data?: { [k: string]: any };
    attachments?: { type: T; fileId: Amity.File['fileId'] }[];
  },
): Promise<Amity.Cached<Amity.Post>> => {
  const client = getActiveClient();
  client.log('post/createPost', bundle);

  // API-FIX: backend rejects that we pass the dataType manually T_T
  if (!bundle.dataType || ['text', 'image', 'file', 'video'].includes(bundle.dataType)) {
    // eslint-disable-next-line no-param-reassign
    delete bundle.dataType;
  }

  const { data: payload } = await client.http.post<Amity.PostPayload>('/api/v4/posts', bundle);

  fireEvent('post.created', payload);

  const data = prepareMembershipPayload(payload, 'communityUsers');
  const cachedAt = client.cache && Date.now();

  if (client.cache) ingestInCache(data, { cachedAt });

  const { posts } = data;

  return {
    data: posts[0],
    cachedAt,
  };
};
