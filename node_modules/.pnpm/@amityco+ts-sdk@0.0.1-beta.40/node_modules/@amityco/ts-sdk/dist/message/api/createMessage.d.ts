/**
 * ```js
 * import { createMessage, createQuery, runQuery } from '@amityco/ts-sdk'
 *
 * const query = createQuery(createMessage, {
 *   subChannelId: 'foobar',
 *   data: { text: 'hello world' },
 * });
 *
 * runQuery(query, ({ data: message, loading }) => {
 *   console.log(message);
 * });
 * ```
 *
 * Creates an {@link Amity.Message}
 *
 * @param bundle The data necessary to create a new {@link Amity.Message}
 * @returns The newly created {@link Amity.Message}
 *
 * @category Message API
 * @async
 */
export declare const createMessage: {
    <T extends Amity.MessageContentType>(bundle: Pick<Amity.Message<T>, "subChannelId" | "parentId" | "dataType" | "tags" | "metadata" | "mentionees"> & {
        data?: Amity.ContentData<T> | undefined;
        fileId?: string | undefined;
    }): Promise<Amity.Cached<Amity.Message>>;
    /**
     * ```js
     * import { createMessage } from '@amityco/ts-sdk'
     *
     * const created = createMessage.optimistically({
     *   channelId: 'foobar',
     *   data: { text: 'hello world' }
     * })
     * ```
     *
     * Creates an {@link Amity.Message} in cache
     *
     * @param bundle The data necessary to create a new {@link Amity.Message}
     * @returns The newly created {@link Amity.Message}
     *
     * @category Message API
     */
    optimistically(bundle: Parameters<typeof createMessage>[0]): Amity.Cached<Amity.Message> | undefined;
};
//# sourceMappingURL=createMessage.d.ts.map