/**
 * ```js
 * import { observeMessage } from '@amityco/ts-sdk'
 *
 * let message = {}
 *
 * const unsub = observeMessage(messageId, updated => message = updated)
 * ```
 *
 * Observe all mutations on a {@link Amity.Message} given a single messageId
 *
 * @param client the client to observe the message with
 * @param messageId the ID of the message to observe
 * @param callback the function to call when new data are available
 * @param policy a query policy option for this observer
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the message
 *
 * @category Message Observer
 */
export declare const observeMessage: <Events extends ["onFetch", "onUpdate", "onDelete"]>(messageId: Amity.Message['messageId'], callback: Amity.ObjectListener<Amity.Snapshot<Amity.Message<any>>, Events>, policy?: Amity.QueryPolicy) => Amity.Unsubscriber;
//# sourceMappingURL=observeMessage.d.ts.map