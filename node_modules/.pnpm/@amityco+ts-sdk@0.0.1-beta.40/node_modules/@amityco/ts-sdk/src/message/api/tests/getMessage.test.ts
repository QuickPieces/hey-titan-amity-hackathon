import { disableCache, enableCache, pullFromCache, pushToCache } from '~/cache/api';
import { isInTombstone } from '~/cache/api/isInTombstone';
import { pushToTombstone } from '~/cache/api/pushToTombstone';
import { ASCApiError } from '~/core/errors';
import { client, generateRawMessage } from '~/utils/tests';

import { getMessage } from '../getMessage';
import { onMessageFetched } from '../../events/onMessageFetched';
import { convertFromRaw } from '../../utils';

const rawMessageToGet = generateRawMessage();
const messageToGet = convertFromRaw(rawMessageToGet);
const { messageId } = messageToGet;

const getResolvedMessageValue = () => ({
  data: {
    messages: [rawMessageToGet],
    users: [],
    files: [],
  },
});

describe('getMessage', () => {
  test('should return fetched message', async () => {
    client.http.get = jest.fn().mockResolvedValueOnce(getResolvedMessageValue());

    await expect(getMessage(messageId)).resolves.toEqual(
      expect.objectContaining({ data: messageToGet }),
    );
  });

  test('should update cache after fetching message', async () => {
    enableCache();
    client.http.get = jest.fn().mockResolvedValue(getResolvedMessageValue());

    await getMessage(messageId);
    const recieved = pullFromCache(['message', 'get', messageId])?.data;

    expect(recieved).toEqual(messageToGet);

    disableCache();
  });

  test('should throw an error if request fails', async () => {
    client.http.get = jest.fn().mockRejectedValueOnce(new Error('error'));

    await expect(getMessage(messageId)).rejects.toThrow('error');
  });

  test('should fire event `onMessageFetched`', async () => {
    let dispose;
    client.http.get = jest.fn().mockResolvedValueOnce(getResolvedMessageValue());

    const callbackPromise = new Promise(resolve => {
      dispose = onMessageFetched(resolve);
    }).finally(dispose);

    await getMessage(messageId);

    await expect(callbackPromise).resolves.toEqual(messageToGet);
  });
});

describe('getMessage tombostone', () => {
  beforeEach(() => enableCache());
  afterEach(() => disableCache());

  test('should add message to tombostone if 404', async () => {
    expect.assertions(2);

    client.http.get = jest
      .fn()
      .mockRejectedValueOnce(
        new ASCApiError('not found!', Amity.ServerError.ITEM_NOT_FOUND, Amity.ErrorLevel.ERROR),
      );

    await expect(getMessage(messageId)).rejects.toThrow();

    expect(() => isInTombstone('message', messageId)).toThrow();
  });

  test('should throw error if message not found in tombostone', async () => {
    pushToTombstone('message', messageId);

    await expect(getMessage(messageId)).rejects.toThrow();
  });
});

describe('getMessage.locally', () => {
  beforeEach(() => enableCache());
  afterEach(() => disableCache());

  test('should return cached message', () => {
    pushToCache(['message', 'get', messageId], messageToGet);

    expect(getMessage.locally(messageId)?.data).toBe(messageToGet);
  });

  test('it should return undefined if message not in cache', () => {
    expect(getMessage.locally('non-existent-message')).toBeUndefined();
  });

  test('should return undefined if cache not enabled', () => {
    disableCache();
    pushToCache(['message', 'get', messageId], messageToGet);

    expect(getMessage.locally(messageId)).toBeUndefined();
  });

  test('should return undefined if 404', async () => {
    expect.assertions(2);
    pushToCache(['message', 'get', messageId], messageToGet);

    client.http.get = jest
      .fn()
      .mockRejectedValueOnce(
        new ASCApiError('not found!', Amity.ServerError.ITEM_NOT_FOUND, Amity.ErrorLevel.ERROR),
      );

    await expect(getMessage(messageId)).rejects.toThrow();
    expect(getMessage.locally(messageId)).toBeUndefined();
  });
});
