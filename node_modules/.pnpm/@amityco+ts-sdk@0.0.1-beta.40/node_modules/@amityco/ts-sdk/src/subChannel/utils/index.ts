export function convertFromRaw({
  channelId,
  channelPublicId,
  channelType,
  childCount,
  creatorId,
  creatorPublicId,
  lastMessageId,
  lastMessageTimestamp,
  messageFeedId,
  name,
  ...rest
}: Amity.RawSubChannel): Amity.SubChannel {
  return {
    ...rest,
    channelId: channelPublicId,
    creatorId: creatorPublicId,
    displayName: name,
    lastActivity: lastMessageTimestamp,
    latestMessageId: lastMessageId,
    messageCount: childCount,
    subChannelId: messageFeedId,
  };
}

export const prepareSubChannelPayload = (
  payload: Amity.SubChannelPayload,
): Amity.ProcessedSubChannelPayload => {
  return {
    ...payload,
    messageFeeds: payload.messageFeeds.map(convertFromRaw),
  };
};

type RawQuerySubChannels = Omit<Amity.QuerySubChannels, 'excludeDefaultSubChannel'> & {
  excludeDefaultMessageFeed?: Amity.QuerySubChannels['excludeDefaultSubChannel'];
};

export function convertQueryParams({
  excludeDefaultSubChannel,
  ...rest
}: Amity.QuerySubChannels): RawQuerySubChannels {
  const out: RawQuerySubChannels = { ...rest };

  if (excludeDefaultSubChannel !== undefined) {
    out.excludeDefaultMessageFeed = excludeDefaultSubChannel;
  }

  return out;
}
