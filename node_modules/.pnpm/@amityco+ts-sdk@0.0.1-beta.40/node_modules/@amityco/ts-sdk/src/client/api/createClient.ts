import { VERSION } from '~/version';

import { createLogger } from '~/core/debug';

import { API_REGIONS, computeUrl } from '~/client/utils/endpoints';
import {
  createHttpTransport,
  createMqttTransport,
  createWebsocketTransport,
} from '~/core/transports';

import { createEventEmitter } from '~/core/events';

import { getActiveClient, setActiveClient } from './activeClient';
import { getFeedSettings } from './getFeedSettings';

import { accessTokenExpiryWatcher } from './accessTokenExpiryWatcher';

const DEFAULT_DEBUG_SESSION = 'amity';

/**
 * ```js
 * import { createClient } from '@amityco/ts-sdk'
 * const client = createClient(apiKey, 'https://asc.server/', 'myClient')
 * ```
 *
 * Creates a new {@link Amity.Client} instance
 *
 * @param apiKey for the {@link Amity.Client} instance
 * @param apiRegion endpoint to connect to
 * @param apiEndpoint custom endpoint in case you don't want to use a preset endpoint
 * @param param.debugSession session's identifier for the client's logger instance
 * @returns A {@link Amity.Client} instance
 *
 * @category Client API
 * */
export const createClient = (
  apiKey: string,
  apiRegion: typeof API_REGIONS[keyof typeof API_REGIONS] = API_REGIONS.SG,
  {
    debugSession = DEFAULT_DEBUG_SESSION,
    apiEndpoint,
  }: {
    debugSession?: string;
    apiEndpoint?: { http?: string; mqtt?: string };
  } = {},
): Amity.Client => {
  const log = createLogger(debugSession);

  log('client/api/createClient', {
    apiKey: apiKey.replace(/.{5}$/g, 'xxxxx'),
    apiRegion,
  });

  const httpEndpoint = apiEndpoint?.http ?? computeUrl('http', apiRegion);
  const mqttEndpoint = apiEndpoint?.mqtt ?? computeUrl('mqtt', apiRegion);

  const http = createHttpTransport(httpEndpoint);
  const ws = createWebsocketTransport(httpEndpoint);
  const mqtt = createMqttTransport(mqttEndpoint);

  const emitter = createEventEmitter();

  const sessionState = Amity.SessionStates.NOT_LOGGED_IN;
  const sessionHandler = undefined;

  const client = {
    version: `${VERSION}`,

    apiKey,
    log,
    http,
    ws,
    mqtt,
    emitter,
    accessTokenExpiryWatcher,
    use: () => setActiveClient(client),

    sessionState,
    sessionHandler,
    getFeedSettings,
  };

  try {
    return getActiveClient();
  } catch {
    setActiveClient(client);
  }

  return client;
};
