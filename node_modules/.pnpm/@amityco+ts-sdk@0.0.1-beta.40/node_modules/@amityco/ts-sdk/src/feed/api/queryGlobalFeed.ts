import { getActiveClient } from '~/client/api/activeClient';

import { toPage, toToken } from '~/core/query';
import { ingestInCache } from '~/cache/api/ingestInCache';
import { pullFromCache, pushToCache } from '~/cache/api';
import { getResolver } from '~/core/model';
import { prepareMembershipPayload } from '~/group/utils';

/**
 * ```js
 * import { queryGlobalFeed } from '@amityco/ts-sdk'
 * const posts = await queryGlobalFeed()
 * ```
 *
 * Queries a paginable list of {@link Amity.Post} objects
 *
 * @param query The query parameters
 * @returns A page of {@link Amity.Post} objects
 *
 * @category Feed API
 * @async
 * */
export const queryGlobalFeed = async (query?: {
  dataTypes?: ('video' | 'image' | 'file' | 'liveStream')[];
  useCustomRanking?: boolean;
  page?: Amity.Page;
}): Promise<Amity.Cached<Amity.Paged<Amity.Post>>> => {
  const client = getActiveClient();
  client.log('feed/queryGlobalFeed', query);

  const { useCustomRanking, page, ...params } = query ?? {};

  const { data: queryPayload } = await client.http.get<Amity.PostPayload & Amity.Pagination>(
    useCustomRanking ? `/api/v5/me/global-feeds` : `/api/v4/me/global-feeds`,
    {
      params: {
        ...params,
        options: {
          token: toToken(page, 'skiplimit'),
        },
      },
    },
  );

  const { paging, ...payload } = queryPayload;

  const data = prepareMembershipPayload(payload, 'communityUsers');

  const { posts } = data;

  const cachedAt = client.cache && Date.now();

  if (client.cache) {
    ingestInCache(data);

    const cacheKey = [
      'globalFeed',
      'query',
      { ...params, useCustomRanking, options: { ...page } } as Amity.Serializable,
    ];
    pushToCache(cacheKey, { posts: posts.map(getResolver('post')), paging });
  }

  const nextPage = toPage(paging.next);
  const prevPage = toPage(paging.previous);

  return { data: posts, cachedAt, prevPage, nextPage };
};

/**
 * ```js
 * import { queryGlobalFeed } from '@amityco/ts-sdk'
 * const posts = await queryGlobalFeed.locally()
 * ```
 *
 * Queries a paginable list of {@link Amity.Post} objects from cache
 *
 * @param query The query parameters
 * @returns A page of {@link Amity.Post} objects
 *
 * @category Feed API
 * @async
 * */
queryGlobalFeed.locally = (
  query?: Parameters<typeof queryGlobalFeed>[0],
): Amity.Cached<Amity.Paged<Amity.Post>> | undefined => {
  const client = getActiveClient();
  client.log('post/queryGlobalFeed.locally', query);

  if (!client.cache) return;

  const { useCustomRanking, page, ...params } = query ?? {};

  const queryKey = [
    'globalFeed',
    'query',
    { ...params, useCustomRanking, options: { ...page } } as Amity.Serializable,
  ];
  const { data, cachedAt } = pullFromCache<{ posts: string[] } & Amity.Pagination>(queryKey) ?? {};

  if (!data?.posts.length) return;

  const posts: Amity.Post[] = data.posts
    .map(postId => pullFromCache<Amity.Post>(['post', 'get', postId])!)
    .filter(Boolean)
    .map(({ data }) => data);

  const prevPage = toPage(data?.paging.previous);
  const nextPage = toPage(data?.paging.next);

  return posts.length === data?.posts?.length
    ? { data: posts, cachedAt, prevPage, nextPage }
    : undefined;
};
