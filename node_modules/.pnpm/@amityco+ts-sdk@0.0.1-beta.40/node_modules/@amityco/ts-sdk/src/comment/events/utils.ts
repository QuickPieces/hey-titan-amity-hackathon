import { getActiveClient } from '~/client/api';
import { createEventSubscriber } from '~/core/events';
import { queryCache, upsertInCache, pullFromCache } from '~/cache/api';
import { ingestInCache } from '~/cache/api/ingestInCache';

export const createCommentEventSubscriber = (
  event: keyof Amity.MqttCommentEvents,
  callback: Amity.Listener<Amity.Comment>,
) => {
  const client = getActiveClient();

  const filter = (payload: Amity.CommentPayload) => {
    if (!client.cache) {
      // TODO: here we are missing specific properties here!
      callback(payload.comments[0]);
    } else {
      ingestInCache(payload);

      const comment = pullFromCache<Amity.Comment>([
        'comment',
        'get',
        payload.comments[0].commentId,
      ])!;

      if (['comment.created'].includes(event)) {
        const queries = queryCache(['comment', 'query'])
          // @ts-ignore
          ?.filter(({ key }) => key[2]?.referenceId === comment.data.referenceId);

        queries?.map(({ key, data }) => upsertInCache(key, data as any, { cachedAt: -1 }));
      }

      callback(comment.data);
    }
  };

  return createEventSubscriber(client, event, event, filter);
};
