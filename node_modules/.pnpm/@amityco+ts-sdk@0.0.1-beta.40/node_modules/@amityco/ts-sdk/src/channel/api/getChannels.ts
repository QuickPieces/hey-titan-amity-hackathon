import { getActiveClient } from '~/client/api';

import { pullFromCache } from '~/cache/api';
import { ingestInCache } from '~/cache/api/ingestInCache';

import { prepareChannelPayload } from '../utils';

/**
 * ```js
 * import { getChannels } from '@amityco/ts-sdk'
 * const channels = await getChannels(['foo', 'bar'])
 * ```
 *
 * Fetches a collection of {@link Amity.Channel} objects
 *
 * @param channelIds the IDs of the {@link Amity.Channel} to fetch
 * @returns the associated collection of {@link Amity.Channel} objects
 *
 * @category Channel API
 * @async
 */
export const getChannels = async (
  channelIds: Amity.Channel['channelId'][],
): Promise<Amity.Cached<Amity.Channel[]>> => {
  const client = getActiveClient();
  client.log('channel/getChannels', channelIds);

  const encodedChannelIds = channelIds.map(channelId => encodeURIComponent(channelId));

  // API-FIX: endpoint should not be /list, parameters should be querystring.
  const { data: payload } = await client.http.get<Amity.ChannelPayload>(`/api/v3/channels/list`, {
    params: { channelIds: encodedChannelIds },
  });

  const data = prepareChannelPayload(payload);

  const cachedAt = client.cache && Date.now();
  if (client.cache) ingestInCache(data, { cachedAt });

  return {
    data: data.channels,
    cachedAt,
  };
};

/**
 * ```js
 * import { getChannels } from '@amityco/ts-sdk'
 * const channels = getChannels.locally(['foo', 'bar']) ?? []
 * ```
 *
 * Fetches a collection of {@link Amity.Channel} objects from cache
 *
 * @param channelIds the IDs of the {@link Amity.Channel} to fetch
 * @returns the associated collection of {@link Amity.Channel} objects
 *
 * @category Channel API
 */
getChannels.locally = (
  channelIds: Amity.Channel['channelId'][],
): Amity.Cached<Amity.Channel[]> | undefined => {
  const client = getActiveClient();
  client.log('channel/getChannels.locally', channelIds);

  if (!client.cache) return;

  const cached = channelIds
    .map(channelId => pullFromCache<Amity.Channel>(['channel', 'get', channelId])!)
    .filter(Boolean);

  if (cached?.length < channelIds.length) return;

  const channels = cached.map(({ data }) => data);
  const oldest = cached.sort((a, b) => (a.cachedAt! < b.cachedAt! ? -1 : 1))?.[0];

  return {
    data: channels,
    cachedAt: oldest.cachedAt,
  };
};
