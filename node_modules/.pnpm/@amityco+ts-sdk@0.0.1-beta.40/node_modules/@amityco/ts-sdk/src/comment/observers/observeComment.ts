import { getActiveClient } from '~/client/api';

import { createQuery, runQuery, queryOptions } from '~/core/query';

import { getComment } from '../api';

import {
  onCommentUpdated,
  onCommentDeleted,
  onCommentFlagged,
  onCommentUnflagged,
  onCommentReactionAdded,
  onCommentReactionRemoved,
} from '../events';

/**
 * ```js
 * import { observeComment } from '@amityco/ts-sdk'
 *
 * let comment = {}
 * const dispose = observeComment(commentId, ({ data }) => comment = data)
 * ```
 *
 * Observe all mutation on a given {@link Amity.Comment}
 *
 * @param commentId the ID of the comment to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the comment
 *
 * @category Comment Observer
 */
export const observeComment = <
  Events extends [
    'onFetch',
    'onUpdate',
    'onDelete',
    'onFlagged',
    'onUnflagged',
    'onReactionAdded',
    'onReactionRemoved',
  ],
>(
  commentId: string,
  callback: Amity.ObjectListener<Amity.Snapshot<Amity.Comment | undefined>, Events>,
  policy: Amity.QueryPolicy = 'cache_then_server',
): Amity.Unsubscriber => {
  const { log } = getActiveClient();

  const timestamp = Date.now();
  log(`observeComment(tmpid: ${timestamp}) > listen`);

  // wrapper function to make sure
  const router = (result: Amity.Snapshot<Amity.Comment | undefined>, action: Events[number]) => {
    if (callback instanceof Function) return callback(result);

    if (action !== 'onFetch') callback.onEvent?.(action, result);

    callback[action]?.(result);
  };

  const realtimeRouter = (result: Amity.Snapshot<Amity.Comment>, action: Events[number]) => {
    if (result.data?.commentId !== commentId) return;

    router(result, action);
  };

  const disposers: Amity.Unsubscriber[] = [];

  disposers.push(
    onCommentUpdated(data => realtimeRouter({ data, loading: false, origin: 'event' }, 'onUpdate')),
    onCommentDeleted(data => realtimeRouter({ data, loading: false, origin: 'event' }, 'onDelete')),
    onCommentFlagged(data =>
      realtimeRouter({ data, loading: false, origin: 'event' }, 'onFlagged'),
    ),
    onCommentUnflagged(data =>
      realtimeRouter({ data, loading: false, origin: 'event' }, 'onUnflagged'),
    ),
    onCommentReactionAdded(data =>
      realtimeRouter({ data, loading: false, origin: 'event' }, 'onReactionAdded'),
    ),
    onCommentReactionRemoved(data =>
      realtimeRouter({ data, loading: false, origin: 'event' }, 'onReactionRemoved'),
    ),
  );

  runQuery(
    createQuery(getComment, commentId),
    result => (result.data || result.error) && router(result, 'onFetch'),
    queryOptions(policy),
  );

  return () => {
    log(`observeComment(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
