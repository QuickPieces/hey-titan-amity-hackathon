import { getActiveClient } from '~/client/api';

import { toPage, toToken } from '~/core/query';
import { pushToCache } from '~/cache/api';
import { ingestInCache } from '~/cache/api/ingestInCache';
import { getResolver } from '~/core/model';

import { prepareCommunityPayload } from '../utils';

/**
 * ```js
 * import { queryCommunities } from '@amityco/ts-sdk'
 * const communities = await queryCommunities()
 * ```
 *
 * Queries a paginable list of {@link Amity.Community} objects
 * Search is performed by displayName such as `.startsWith(search)`
 *
 * @param query The query parameters
 * @returns A page of {@link Amity.Community} objects
 *
 * @category Community API
 * @async
 */
export const queryCommunities = async (
  query?: Amity.QueryCommunities,
): Promise<Amity.Cached<Amity.Paged<Amity.Community>>> => {
  const client = getActiveClient();
  client.log('channel/queryCommunities', query);

  // safe decapsulation
  const { page, ...params } = query ?? {};
  const { displayName, membership, ...restParams } = params ?? {};

  // API-FIX: parameters should be querystring.
  // API-FIX: backend doesnt answer Amity.Response
  // const { data } = await client.http.get<Amity.Response<Amity.PagedResponse<CommunityPayload>>>(
  const { data } = await client.http.get<Amity.CommunityPayload & Amity.Pagination>(
    `/api/v3/communities`,
    {
      params: {
        ...restParams,
        keyword: displayName,
        filter: membership,
        options: {
          token: toToken(page, 'skiplimit'),
        },
      },
    },
  );

  const { paging, ...payload } = data;
  const unpackedPayload = prepareCommunityPayload(payload);
  const { communities } = unpackedPayload;

  const cachedAt = client.cache && Date.now();

  if (client.cache) {
    ingestInCache(unpackedPayload, { cachedAt });

    const cacheKey = [
      'community',
      'query',
      { ...params, options: { ...page } } as Amity.Serializable,
    ];
    pushToCache(cacheKey, { communities: communities.map(getResolver('community')), paging });
  }

  const nextPage = toPage(paging.next);
  const prevPage = toPage(paging.previous);

  return { data: communities, cachedAt, prevPage, nextPage };
};

/**
 * ```js
 * import { queryCommunities } from '@amityco/ts-sdk'
 * const communities = queryCommunities.locally()
 * ```
 *
 * Queries a paginable list of {@link Amity.Community} objects from cache
 *
 * @param query The query parameters
 * @returns communities
 *
 * @category Community API
 */
queryCommunities.locally = (query: Parameters<typeof queryCommunities>[0]) => {
  const client = getActiveClient();
  client.log('community/queryCommunities.locally', query);

  // TODO
};
