import { getActiveClient } from '~/client/api';

import {
  onFollowerRequested,
  onFollowRequestAccepted,
  onFollowRequestDeclined,
  onFollowRequestCanceled,
  onUserFollowed,
  onUserUnfollowed,
  onFollowerDeleted,
} from '../events';

/**
 * ```js
 * import { observeFollowings } from '@amityco/ts-sdk'
 *
 * let followings = []
 * const unsub = observeFollowers('userId', follower => merge(followings, following))
 * ```
 *
 * Observe all mutations on a list of followings {@link Amity.FollowStatus} for a given user
 *
 * @param userId the ID of the {@link Amity.User}
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the messages
 *
 * @category Follow Observer
 */
export const observeFollowings = <
  Events extends [
    'onRequested',
    'onAccepted',
    'onDeclined',
    'onCanceled',
    'onFollowed',
    'onUnfollowed',
    'onDeleted',
  ],
>(
  userId: Amity.User['userId'],
  callback: Amity.ObjectListener<Amity.FollowStatus, Events>,
): Amity.Unsubscriber => {
  const { log } = getActiveClient();

  const timestamp = Date.now();
  log(`observeFollowings(tmpid: ${timestamp}) > listen`);

  const disposers: Amity.Unsubscriber[] = [];

  const router = (status: Amity.FollowStatus, action: Events[number]) => {
    if (status.to !== userId) {
      return;
    }

    if (callback instanceof Function) {
      return callback(status);
    }

    callback.onEvent?.(action, status);
    callback[action]?.(status);
  };

  disposers.push(
    onFollowerRequested(x => router(x, 'onRequested')),
    onFollowRequestAccepted(x => router(x, 'onAccepted')),
    onFollowRequestDeclined(x => router(x, 'onDeclined')),
    onFollowRequestCanceled(x => router(x, 'onCanceled')),
    onUserFollowed(x => router(x, 'onFollowed')),
    onUserUnfollowed(x => router(x, 'onUnfollowed')),
    onFollowerDeleted(x => router(x, 'onDeleted')),
  );

  return () => {
    log(`observeFollowings(tmpid: ${timestamp}) > dispose`);
    disposers.forEach(fn => fn());
  };
};
