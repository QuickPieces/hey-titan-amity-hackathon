import { getActiveClient } from '~/client/api';
import { synchronousWSCall } from '~/core/transports';
import { pullFromCache, pushToCache } from '~/cache/api';

/**
 * ```js
 * import { startReading } from '@amityco/ts-sdk'
 * const success = await startReading('foo')
 * ```
 *
 * Mark all messages as read and start reading message inside channel
 *
 * @param {string} subChannelId - The channel ID to start reading.
 * @param {string} userId - The user ID of channel member.
 * @return {Promise<boolean>>} A success boolean if the channel reading of the sub channel had begun.
 *
 * @category Message API
 * @async
 */
export const startReading = async (subChannelId: string, userId = getActiveClient().userId) => {
  const client = getActiveClient();
  client.log('message/startReading', { subChannelId });

  const subChannel = pullFromCache<Amity.SubChannel>(['subChannel', 'get', subChannelId]);

  if (!subChannel) {
    return;
  }

  const { channelId } = subChannel.data;
  const channel = pullFromCache<Amity.Channel>(['channel', 'get', channelId]);

  if (!channel || channel.data.defaultSubChannelId !== subChannelId) {
    return;
  }

  const update: Amity.Channel = {
    ...channel.data,
    // @ts-ignore
    localReading: true,
    defaultSubChannelUnreadCount: 0,
    defaultSubChannelHasUnreadMention: false,
  };

  pushToCache(['channel', 'get', channelId], update);
  client.emitter.emit('local.channel.updated', { channels: [update] });

  const result = await synchronousWSCall<Record<never, never>>(client, 'channel.startReading', {
    channelId,
  });

  return !!result;
};
