/**
 * ```js
 * import { observePost } from '@amityco/ts-sdk'
 *
 * let post = {}
 * const dispose = observePost(postId, updated => post = updated)
 * ```
 *
 * Observe all mutation on a given {@link Amity.Post}
 *
 * @param postId the ID of the post to observe
 * @param callback the function to call when new data are available
 * @returns An {@link Amity.Unsubscriber} function to run when willing to stop observing the post
 *
 * @category Post Observer
 */
export declare const observePost: <Events extends ["onFetch", "onUpdate", "onDelete", "onApproved", "onDeclined", "onFlagged", "onUnflagged", "onReactionAdded", "onReactionRemoved"]>(postId: string, callback: Amity.ObjectListener<Amity.Snapshot<Amity.Post<any> | undefined>, Events>, policy?: Amity.QueryPolicy) => Amity.Unsubscriber;
//# sourceMappingURL=observePost.d.ts.map