import { pullFromCache } from '~/cache/api';
import { getActiveClient } from '~/client/api';

/** @hidden */
export const preparePayloadForCache = <
  T extends
    | 'post.addReaction'
    | 'post.removeReaction'
    | 'comment.addReaction'
    | 'comment.removeReaction',
>(
  event: T,
  payload: Amity.Events[T],
) => {
  const client = getActiveClient();

  if (client.userId !== payload.reactor.userId) {
    return;
  }

  let model: Amity.Reactable;
  let cached: Amity.Reactable | undefined;

  if (event === 'post.addReaction' || event === 'post.removeReaction') {
    const post = (payload as Amity.Events['post.addReaction']).posts[0];
    cached = pullFromCache<Amity.Post>(['post', 'get', post.postId])?.data;
    model = post;
  } else {
    const comment = (payload as Amity.Events['comment.addReaction']).comments[0];
    cached = pullFromCache<Amity.Comment>(['comment', 'get', comment.commentId])?.data;
    model = comment;
  }

  if (!cached || !cached.myReactions) {
    return;
  }

  if (event === 'post.addReaction' || event === 'comment.addReaction') {
    if (cached.myReactions.includes(payload.reactor.reactionName)) {
      return;
    }

    Object.assign(model, { myReactions: [...cached.myReactions, payload.reactor.reactionName] });
  } else {
    if (!cached.myReactions.includes(payload.reactor.reactionName)) {
      return;
    }

    Object.assign(model, {
      myReactions: cached.myReactions.filter(x => x !== payload.reactor.reactionName),
    });
  }
};
